{"version":3,"sources":["serviceWorker.js","components/Layout/Layout.js","components/StartGameWindow/StartGameButton/StartGameButton.js","components/StartGameWindow/GameInfo/GameInfo.js","components/StartGameWindow/StartGameWindow.js","components/Boards/Board/Board.js","components/Boards/Boards.js","components/EndGameWindow/GameInfo/BestResultsBoard/OneResult/OneResult.js","components/EndGameWindow/GameInfo/BestResultsBoard/BestResultsBoard.js","components/UI/Spinner/Spinner.js","components/EndGameWindow/GameInfo/GameInfo.js","components/EndGameWindow/SendResult/YourPosition/YourPosition.js","components/EndGameWindow/SendResult/SendResult.js","components/EndGameWindow/EndGameWindow.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","_templateObject","layout","props","react_default","a","createElement","Fragment","children","Button","styled","button","StartGameButton_templateObject","isGameReady","startGameButton","time","startGame","message","disabled","onClick","GameInfoWrapper","div","GameInfo_templateObject","GameInfo","StartGameWindow","StartGameWindow_templateObject","_ref","isGameRunning","startGameWindow","StartGameWindow_GameInfo_GameInfo","StartGameButton","Board","Board_templateObject","board","isDone","boardColor","clickBoard","renderedBoardCokor","backgroundColor","style","BoardWrapper","Boards_templateObject","boards","renderedBoards","map","Board_Board","key","id","color","e","OneResult","name","BestResultsBoardWrapper","BestResultsBoard_templateObject","fetchedResults","length","Table","table","_templateObject2","BestResultsBoard","results","result","index","BestResultsBoard_OneResult_OneResult","SpinnerStyle","Spinner_templateObject","GameInfo_GameInfo_templateObject","TitleStyle","h1","GameInfo_templateObject2","isSended","Spinner","_templateObject3","GameInfo_GameInfoWrapper","GameInfo_BestResultsBoard_BestResultsBoard","GameInfo_Spinner","YourPositionWrapper","YourPosition_templateObject","YourPosition","playerPosition","FormWrapper","form","SendResult_templateObject","SendResult","postAndGetResults","changeName","onSubmit","htmlFor","placeholder","type","value","onChange","SendResult_YourPosition_YourPosition","EndGameWindowWrapper","EndGameWindow_templateObject","StartAnotherGameButton","EndGameWindow_templateObject2","API","EndGameWindow","state","changeNameHandler","preventDefault","_this","setState","target","postAndGetResultsHandler","axios","post","then","res","get","data","Object","values","times","push","sort","b","findIndex","timeA","timeB","comparison","splice","alert","_this$state","this","_this$props","EndGameWindow_GameInfo_GameInfo","EndGameWindow_SendResult_SendResult","Component","App","allColors","clickedBoards","wait","boardsDone","giveRandomColorsHandler","i","random","Math","floor","showBoardsForASecondHandler","console","log","setTimeout","forEach","countTimeHandler","timeID","setInterval","clickOnBoardHandler","startGameHandler","_this2","dataColors","prevProps","prevState","_this3","_this$state2","clearInterval","componentDidMount","_this$state3","Layout","StartGameWindow_StartGameWindow","Boards","giveColors","components_EndGameWindow_EndGameWindow","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9246d68c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Montserrat', sans-serif;\r\n    overflow: hidden;\r\n}`\r\n\r\n\r\n\r\nconst layout = props => {\r\n\r\n    return (\r\n        <>\r\n            <GlobalStyle />\r\n            {props.children}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default layout;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nexport const Button = styled.button`\r\npadding: 5px 10px;\r\nbackground-color: transparent;\r\nborder: 1px solid #fff;\r\nborder-radius: 50px;\r\nfont-size: 20px;\r\ncolor: gold;\r\ncursor: pointer;\r\nfont-weight: 900;\r\nopacity: ${props => {\r\n        if (props.isGameReady) return '1'\r\n        return '.4'\r\n    }};\r\ntransition: opacity .4s;\r\n`\r\n\r\nconst startGameButton = props => {\r\n    const { time, startGame, isGameReady } = props\r\n\r\n    const message = time === 0 ? 'StartGame' : 'Start another game!'\r\n\r\n    return (\r\n        <Button\r\n            disabled={isGameReady ? false : true}\r\n            isGameReady={isGameReady}\r\n            onClick={startGame}>\r\n            {message}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default startGameButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst GameInfoWrapper = styled.div`\r\nwidth: 80%;\r\nflex-basis: 70%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\ntext-align: justify;\r\nfont-size: 16px;\r\nletter-spacing: 1px;\r\nh1{\r\n    font-size: 22px;\r\n    text-align: center;\r\n}\r\np{\r\n   color: #ddd;\r\n}\r\n`\r\n\r\n\r\n\r\n\r\n\r\nconst GameInfo = props => {\r\n    return (\r\n        <GameInfoWrapper>\r\n            <h1>Memory Game!</h1>\r\n            <p>The game is simple - you have 9 pairs of colors to find as fast as you can. You will have 1 second to remember colors position. Start the game and let the timer begin! Compare your result with others!</p>\r\n        </GameInfoWrapper>\r\n    );\r\n};\r\n\r\nexport default GameInfo;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport StartGameButton from './StartGameButton/StartGameButton';\r\nimport GameInfo from './GameInfo/GameInfo';\r\n\r\n\r\nconst StartGameWindow = styled.div`\r\ntop: ${({ isGameRunning }) => isGameRunning ? '-100%' : '0'};\r\nposition: absolute;\r\nleft: 0;\r\nheight: 100%;\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\nbackground-color: #262f3d;\r\ncolor: #fff;\r\ntransition: .4s;\r\n`\r\n\r\n\r\nconst startGameWindow = props => {\r\n    const { isGameRunning, startGame, time, isGameReady } = props\r\n\r\n    return (\r\n\r\n        < StartGameWindow\r\n            isGameRunning={isGameRunning}>\r\n            <GameInfo />\r\n            <StartGameButton\r\n                isGameReady={isGameReady}\r\n                startGame={startGame}\r\n                time={time} />\r\n        </StartGameWindow >\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default startGameWindow;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Board = styled.div`\r\n    flex-basis: 15%;\r\n    flex-grow: 1;\r\n    height: 33.33vh;\r\n    background-color: gray;\r\n    border: 1px solid white;\r\n\r\n@media(orientation: portrait){\r\n        height: 16.66vh;\r\n        flex-basis: 33.30%;\r\n}\r\n`\r\n\r\n\r\n\r\nconst board = props => {\r\n    const { isDone, boardColor, clickBoard } = props\r\n\r\n    const isBoardDone = isDone ? boardColor : '#555'\r\n    const renderedBoardCokor = { backgroundColor: isBoardDone }\r\n\r\n\r\n    return (\r\n        <Board\r\n            style={renderedBoardCokor}\r\n            onClick={clickBoard}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default board;","import React from 'react';\r\nimport Board from './Board/Board';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst BoardWrapper = styled.div`\r\nheight: 100vh;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\nbackground-color: #333;\r\n`\r\n\r\n\r\nconst boards = props => {\r\n\r\n    const renderedBoards = props.renderedBoards.map(board => (\r\n        <Board\r\n            key={board.id}\r\n            boardColor={board.color}\r\n            isDone={board.isDone}\r\n            clickBoard={e => props.clickBoard(e, board.id)}\r\n        />\r\n    ))\r\n\r\n\r\n    return (\r\n        <BoardWrapper>\r\n            {renderedBoards}\r\n        </BoardWrapper>\r\n    );\r\n};\r\n\r\nexport default boards;","import React from 'react';\r\n\r\nconst OneResult = props => {\r\n    const { time, name } = props\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{time}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default OneResult;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport OneResult from './OneResult/OneResult';\r\n\r\nconst BestResultsBoardWrapper = styled.div`\r\nposition: absolute;\r\ntop: 5%;\r\nleft: ${props => {\r\n        if (props.fetchedResults.length > 0) return '0'\r\n        return '-110%'\r\n    }};\r\ntransition: .4s;\r\nheight: 100%;\r\nwidth: 100%;\r\n/* background-color: red; */\r\nfont-size: 15px;\r\n`\r\nconst Table = styled.table`\r\nheight: 80%;\r\nwidth: 90%;\r\nmargin: 10px auto 0 auto;\r\nbackground-color: #FFDC00;\r\ncolor: #111;\r\ntr{\r\n    background-color: #FF4136;\r\n}\r\ntd{\r\n    color: #000;\r\n}\r\n`\r\n\r\n\r\nconst BestResultsBoard = props => {\r\n    const { fetchedResults } = props\r\n\r\n\r\n    const results = fetchedResults.map((result, index) => (\r\n        <OneResult\r\n            time={result.time}\r\n            name={result.name}\r\n            key={index}\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <BestResultsBoardWrapper\r\n            fetchedResults={fetchedResults}\r\n        >\r\n            <h3>Top 10 Best results</h3>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {results}\r\n                </tbody>\r\n\r\n            </Table>\r\n\r\n        </BestResultsBoardWrapper>\r\n    );\r\n};\r\n\r\nexport default BestResultsBoard;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nexport const SpinnerStyle = styled.div`\r\n  border-radius: 50%;\r\n  width: 5rem;\r\n  height: 5rem;\r\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\r\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\r\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\r\n  border-left: 1.1em solid #ffffff;\r\n  animation: load8 1.1s infinite linear;\r\n/* &:after {\r\n  border-radius: 50%;\r\n  width: 5rem;\r\n  height: 5rem;\r\n} */\r\n@-webkit-keyframes load8 {\r\n  0% {\r\n    -webkit-transform: rotate(0deg);\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n@keyframes load8 {\r\n  0% {\r\n    -webkit-transform: rotate(0deg);\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n`\r\n\r\n\r\nconst Spinner = props => {\r\n    return (\r\n        <SpinnerStyle />\r\n    );\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport BestResultsBoard from './BestResultsBoard/BestResultsBoard';\r\nimport { SpinnerStyle } from '../../UI/Spinner/Spinner'\r\n\r\nconst GameInfoWrapper = styled.div`\r\nposition: absolute;\r\ntop: 0;\r\nleft: 2%;\r\nright: 2%;\r\nbottom: 50vh;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\nalign-items: center;\r\ntext-align: center;\r\n`\r\nconst TitleStyle = styled.h1`\r\nposition: absolute;\r\ntop: 50%;\r\nleft: ${props => {\r\n        if (props.isSended) return '200%'\r\n        return '50%'\r\n    }};\r\nwidth: 90%;\r\nfont-size: 22px;\r\ntransform: translate(-50%,-50%);\r\ntransition: .9s;\r\n\r\nspan{\r\n    display: block;\r\n    width: 100%;\r\n    color: gold;\r\n    margin-top: 5px;\r\n    font-size: 16px;\r\n}\r\n    `\r\n\r\nconst Spinner = styled(SpinnerStyle)`\r\nposition: absolute;\r\ntop: 50%;\r\ntransform: translate(-50%,-50%);\r\n`\r\n\r\nconst GameInfo = props => {\r\n    const { fetchedResults, isSended, time } = props\r\n\r\n    return (\r\n        <GameInfoWrapper\r\n            fetchedResults={fetchedResults}>\r\n            <BestResultsBoard\r\n                fetchedResults={fetchedResults}\r\n            />\r\n            <TitleStyle\r\n                isSended={isSended}\r\n            >Well done! Your time is: <span>{time} seconds! </span>\r\n            </TitleStyle>\r\n            {isSended && fetchedResults.length === 0 ? <Spinner /> : null}\r\n        </GameInfoWrapper>\r\n    );\r\n};\r\n\r\nexport default GameInfo;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst YourPositionWrapper = styled.div`\r\nposition: absolute;\r\ntop: 51vh;\r\nleft: 5%;\r\nheight: 25vh;\r\nwidth: 90%;\r\ndisplay: flex;\r\njustify-content: space-around;\r\nalign-items: center;\r\nopacity: ${props => {\r\n        if (props.fetchedResults.length > 0) return '1'\r\n        return '0'\r\n    }};\r\nz-index: ${props => {\r\n        if (props.fetchedResults.length > 0) return '1'\r\n        return '-1'\r\n    }};\r\ntransition: .5s;\r\nbackground-color: #333;\r\nborder: 1px solid gold;\r\nborder-radius: 15px;\r\nh3{\r\n   padding: 5%;\r\n}\r\nspan{\r\n    /* margin-top: 80px; */\r\n    display: block;\r\n    width: 100%;\r\n}\r\n\r\n`\r\n\r\n\r\n\r\n\r\nconst YourPosition = props => {\r\n    const { fetchedResults, playerPosition } = props\r\n    const messagee = () => {\r\n        if (playerPosition === 1) {\r\n            return message = `Wooohoo! You're the best here!`\r\n        }\r\n        else if (playerPosition > 1 && playerPosition < 5) {\r\n            return message = `Good job!`\r\n        } else if (playerPosition >= 5 && playerPosition <= 10) {\r\n            return message = `You have your name on the board! It's quite good, isn't it?`\r\n        } else if (playerPosition > 10) {\r\n            return message = `Man...Stop afking, start playing.`\r\n        }\r\n        else if (playerPosition > 15) {\r\n            return message = `Only WolnyWiesiek is worse than you...`\r\n        }\r\n\r\n    }\r\n\r\n    let message = messagee()\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <YourPositionWrapper\r\n            fetchedResults={fetchedResults}\r\n        >\r\n            <h3>Your position: {playerPosition}<span> {message}</span></h3>\r\n        </YourPositionWrapper>\r\n    );\r\n};\r\n\r\nexport default YourPosition;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport YourPosition from './YourPosition/YourPosition';\r\n\r\nconst FormWrapper = styled.form`\r\nposition: absolute;\r\ntop: 51vh;\r\nleft: ${props => {\r\n        if (props.isSended) return '140%'\r\n        return '5%'\r\n    }};\r\n    transition: .9s;\r\nwidth: 90%;\r\nheight: 25vh;\r\nbackground-color: yellow;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\nfont-size: 18px;\r\nbackground-color: #333;\r\nborder: 1px solid gold;\r\nborder-radius: 15px;\r\ntext-align: center;\r\ninput{\r\n    margin-top: 10px;\r\n    padding: 5px;\r\n    width: 80%;\r\n    text-align: center;\r\n}\r\n\r\nbutton{\r\n    background-color: gold;\r\n    border: none;\r\n    padding: 10px;\r\n    border-radius: 50px;\r\n    font-weight: 900;\r\n}\r\n`\r\n\r\n\r\n\r\nconst SendResult = props => {\r\n\r\n    const { playerPosition, fetchedResults, postAndGetResults, isSended, name, changeName } = props\r\n\r\n    return (\r\n        <>\r\n            <FormWrapper\r\n                fetchedResults={fetchedResults}\r\n                onSubmit={postAndGetResults}\r\n                isSended={isSended} >\r\n                <label\r\n                    htmlFor=\"name\">Enter your name\r\n            <input\r\n                        placeholder='your name here'\r\n                        type=\"text\"\r\n                        id='name'\r\n                        value={name}\r\n                        onChange={changeName} />\r\n                </label>\r\n                <button\r\n                    disabled={isSended ? true : false}>\r\n                    Send your result!\r\n                </button>\r\n            </FormWrapper>\r\n            <YourPosition\r\n                playerPosition={playerPosition}\r\n                fetchedResults={fetchedResults} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SendResult;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport GameInfo from './GameInfo/GameInfo';\r\nimport SendResult from './SendResult/SendResult';\r\nimport axios from 'axios';\r\nimport { Button } from '../StartGameWindow/StartGameButton/StartGameButton'\r\nconst EndGameWindowWrapper = styled.div`\r\ntop: ${({ isGameRunning, time }) => {\r\n        if (!isGameRunning && time > 0) {\r\n            return '0'\r\n        }\r\n        else return '-100%'\r\n    }};\r\nposition: absolute;\r\nleft: 0;\r\nheight: 100%;\r\nwidth: 100%; \r\nbackground-color: #222;\r\ncolor: #fff;\r\ntransition: .4s;\r\nfont-size: 12px;\r\n\r\n`\r\nconst StartAnotherGameButton = styled(Button)`\r\nposition: absolute;\r\ntop: 85vh;\r\nheight: 10vh;\r\nleft: 50%;\r\nwidth: 60%;\r\nfont-size: 14px;\r\ntransform: translateX(-50%);\r\nborder: ${props => {\r\n        if (props.fetchedResults.length > 0) return '1px solid gold'\r\n    }};\r\ncolor: ${props => {\r\n        if (props.fetchedResults.length > 0) return 'gold'\r\n    }};\r\n`\r\n\r\n\r\nconst API = 'https://colors-results.firebaseio.com/.json'\r\nclass EndGameWindow extends Component {\r\n\r\n\r\n    state = {\r\n        name: '',\r\n        fetchedResults: [],\r\n        isSended: false,\r\n        playerPosition: '',\r\n    }\r\n\r\n    changeNameHandler = e => {\r\n        e.preventDefault()\r\n        this.setState({ name: e.target.value })\r\n    }\r\n\r\n\r\n    postAndGetResultsHandler = e => {\r\n        const { name } = this.state\r\n        const time = this.props.time\r\n        const result = { name, time }\r\n        e.preventDefault()\r\n        if (name) {\r\n            this.setState({ isSended: true })\r\n            axios.post(API, result)\r\n                .then(res => {\r\n                    axios.get(API)\r\n                        .then(res => {\r\n                            let data = Object.values(res.data);\r\n                            const times = [];\r\n                           data.map(result=>(\r\n                               times.push(result.time)\r\n                           ))\r\n                           ;\r\n                           const playerPosition = 1 + times.sort((a,b)=>{\r\n                               return a-b\r\n                           }).findIndex(time=>(\r\n                             time===this.props.time\r\n                           ))\r\n                           \r\n                            function compare(a, b) {\r\n                                const timeA = a.time\r\n                                const timeB = b.time\r\n                                let comparison = 0;\r\n                                if (timeA > timeB) {\r\n                                    comparison = 1\r\n                                } else if (timeA < timeB) {\r\n                                    comparison = -1;\r\n                                }\r\n                                return comparison;\r\n                            }\r\n                            data.sort(compare)\r\n                            data = data.splice(0, 10);\r\n                           \r\n                            this.setState({ fetchedResults: data,playerPosition  })\r\n                        })\r\n                }\r\n                )\r\n\r\n        } else {\r\n            alert('Enter your name!')\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const { name, isSended, fetchedResults,playerPosition } = this.state\r\n        const { time, isGameRunning } = this.props\r\n\r\n        return (\r\n            <EndGameWindowWrapper\r\n                isGameRunning={isGameRunning}\r\n                time={time}>\r\n\r\n\r\n                <GameInfo\r\n                    fetchedResults={fetchedResults}\r\n                    time={time}\r\n                    isSended={isSended}\r\n                />\r\n\r\n\r\n                <SendResult\r\n                    fetchedResults={fetchedResults}\r\n                    isSended={isSended}\r\n                    changeName={this.changeNameHandler}\r\n                    name={name}\r\n                    postAndGetResults={this.postAndGetResultsHandler}\r\n                    playerPosition={playerPosition}\r\n                />\r\n\r\n                <StartAnotherGameButton\r\n                    onClick={this.props.startGame}\r\n                    fetchedResults={fetchedResults}\r\n                >    Start another game!\r\n                \r\n                </StartAnotherGameButton>\r\n\r\n            </EndGameWindowWrapper>\r\n        );\r\n    }\r\n};\r\n\r\nexport default EndGameWindow;","import React, { Component } from 'react';\nimport Layout from '../components/Layout/Layout';\nimport StartGameWindow from '../components/StartGameWindow/StartGameWindow';\nimport Boards from '../components/Boards/Boards';\nimport EndGameWindow from '../components/EndGameWindow/EndGameWindow';\nimport axios from 'axios';\n\n\nconst COLORS_API = 'https://colors-a5386.firebaseio.com/.json'\n\nclass App extends Component {\n\n  state = {\n    allColors: [],\n    renderedBoards: [],\n    isGameReady: false,\n    isGameRunning: false,\n    clickedBoards: [],\n    wait: false,\n    time: 0,\n    boardsDone: [],\n  }\n\n  // works ok\n  componentDidMount() {\n    const { allColors } = this.state\n    axios.get(COLORS_API)\n      .then(res => {\n        const dataColors = res.data;\n        for (let i = 0; i < 18; i++) {\n          const random = Math.floor(Math.random() * dataColors.length);\n          allColors[i] = res.data[random]\n          dataColors.splice(random, 1)\n        }\n        this.setState({ allColors, isGameReady: true })\n      })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(this.state.allColors)\n    const {\n      clickedBoards,\n      renderedBoards,\n      boardsDone,\n      isGameRunning } = this.state\n\n    if (boardsDone.length === 18 && prevState.isGameRunning === true) {\n      clearInterval(this.timeID)\n      this.setState({ isGameReady: false, isGameRunning: false, renderedBoards: [], boardsDone: [], })\n      this.componentDidMount()\n    }\n\n    if (isGameRunning) {\n      if (this.state.clickedBoards.length === 2) {\n        if (clickedBoards[0].color !== clickedBoards[1].color) {\n          this.setState({ wait: true })\n          setTimeout(() => {\n            renderedBoards[clickedBoards[0].id].isDone = false\n            renderedBoards[clickedBoards[1].id].isDone = false\n            this.setState({ renderedBoards, wait: false })\n          }, 350)\n\n        } else {\n          boardsDone.push(clickedBoards[0].id)\n          boardsDone.push(clickedBoards[1].id)\n\n\n        }\n        this.setState({ clickedBoards: [], boardsDone, })\n      }\n    }\n\n  }\n\n  // works ok\n  giveRandomColorsHandler = () => {\n    const { renderedBoards } = this.state\n    let { allColors } = this.state\n    allColors = allColors.splice(1, 9)\n    for (let i = 0; i < 9; i++) {\n      allColors.push(allColors[i])\n    }\n    for (let i = 0; i < 18; i++) {\n      const random = Math.floor(Math.random() * allColors.length);\n      renderedBoards[i] = {\n        id: i,\n        color: allColors[random],\n        isDone: true,\n      }\n      allColors.splice(random, 1)\n    }\n    this.setState({ renderedBoards })\n  }\n\n  // works ok\n  showBoardsForASecondHandler = () => {\n    const renderedBoards = this.state.renderedBoards\n    console.log(renderedBoards)\n    setTimeout(() => {\n      renderedBoards.forEach(board => board.isDone = false)\n      this.setState({ renderedBoards })\n    }, 1400);\n  }\n\n  countTimeHandler = () => {\n    let time = 0;\n    console.log(time)\n    this.timeID = setInterval(() => {\n      time++;\n      this.setState({ time })\n    }, 1000);\n  }\n\n  clickOnBoardHandler = (e, id) => {\n    const { renderedBoards, clickedBoards } = this.state\n    const index = renderedBoards.findIndex(board => (\n      board.id === id\n    ))\n    if (renderedBoards[index].isDone) return\n    if (this.state.wait) return\n    renderedBoards[index].isDone = true;\n    clickedBoards.push(renderedBoards[index])\n    this.setState({ renderedBoards, clickedBoards })\n  }\n\n  // works ok\n  startGameHandler = () => {\n    this.giveRandomColorsHandler();\n    this.showBoardsForASecondHandler();\n    this.countTimeHandler();\n    this.setState({ isGameRunning: true })\n  }\n\n\n  render() {\n    // console.log(this.state.renderedBoards)\n    // console.log(this.timeID)\n    const { renderedBoards, time, isGameRunning, isGameReady } = this.state\n    return (\n      <Layout>\n\n        <StartGameWindow\n          isGameRunning={isGameRunning}\n          startGame={this.startGameHandler}\n          time={time}\n          isGameReady={isGameReady}\n        />\n        <Boards\n          clickBoard={this.clickOnBoardHandler}\n          renderedBoards={renderedBoards}\n          giveColors={this.giveRandomColorsHandler} />\n\n        <EndGameWindow\n          isGameRunning={isGameRunning}\n          time={time}\n          startGame={this.startGameHandler}\n        />\n      </Layout>\n\n\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}