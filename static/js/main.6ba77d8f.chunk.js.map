{"version":3,"sources":["serviceWorker.js","components/Layout/Layout.js","components/UI/Buttons/StartGameButton/StartGameButton.js","components/StartGameWindow/GameInfo/GameInfo.js","components/StartGameWindow/StartGameWindow.js","components/Boards/Board/Board.js","components/Boards/Boards.js","components/EndGameWindow/PlayerGameInfo/PlayerGameInfo.js","components/EndGameWindow/SendResultForm/SendResultForm.js","components/EndGameWindow/BestResultsBoard/OneResult/OneResult.js","components/EndGameWindow/BestResultsBoard/BestResultsBoard.js","components/EndGameWindow/PlayerPosition/PlayerPosition.js","components/UI/Spinner/Spinner.js","components/EndGameWindow/EndGameWindow.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","_templateObject","layout","props","react_default","a","createElement","Fragment","children","Button","styled","button","StartGameButton_templateObject","isGameReady","startGameButton","startGame","disabled","onClick","GameInfoWrapper","div","GameInfo_templateObject","GameInfo","StartGameWindowWrapper","StartGameWindow_templateObject","_ref","isStartGameWindowActive","startGameWindow","time","StartGameWindow_GameInfo_GameInfo","StartGameButton","Board","Board_templateObject","board","isDone","boardColor","clickBoard","renderedBoardCokor","backgroundColor","style","BoardWrapper","Boards_templateObject","boards","renderedBoards","map","Board_Board","key","id","color","e","Title","h2","PlayerGameInfo_templateObject","isSended","PlayerGameInfo","FormWrapper","form","SendResultForm_templateObject","SendResult","fetchedResults","postAndGetResults","name","changeName","onSubmit","htmlFor","placeholder","type","value","onChange","OneResult","BestResultsBoardWrapper","BestResultsBoard_templateObject","Table","table","_templateObject2","BestResultsBoard","results","result","index","BestResultsBoard_OneResult_OneResult","YourPositionWrapper","PlayerPosition_templateObject","YourPosition","playerPosition","message","SpinnerStyle","Spinner_templateObject","Spinner","EndGameWindowWrapper","EndGameWindow_templateObject","isGameRunning","FormAndResultsBoardWrapper","EndGameWindow_templateObject2","API","EndGameWindow","state","changeNameHandler","preventDefault","_this","setState","target","postAndGetResultsHandler","axios","post","then","res","get","data","Object","values","times","push","sort","b","findIndex","timeA","timeB","comparison","splice","alert","prevProps","prevState","_this2","this","length","setTimeout","_this$state","_this$props","EndGameWindow_PlayerGameInfo_PlayerGameInfo","EndGameWindow_BestResultsBoard_BestResultsBoard","SendResultForm","UI_Spinner_Spinner","PlayerPosition","Component","App","allColors","clickedBoards","wait","boardsDone","createRenderedBoardsHandler","temporaryArray","toConsumableArray","i","random","Math","floor","colorsToConcat","colorsToRender","concat","startGameHandler","console","log","showBoardsForASecondHandler","countTimeHandler","forEach","timeID","setInterval","clickOnBoardHandler","_this3","_this$state2","clearInterval","_this$state3","Layout","StartGameWindow","Boards","giveColors","giveRandomColorsHandler","components_EndGameWindow_EndGameWindow","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sUCfN,IAAMC,EAAcC,YAAHC,KAuBFC,EAZA,SAAAC,GAEX,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACP,EAAD,MACCI,EAAMK,oSChBnB,IAAMC,EAASC,IAAOC,OAAVC,IAGD,SAAAT,GACH,OAAIA,EAAMU,YAAoB,IACvB,OAwBAC,EAbS,SAAAX,GAAS,IACrBU,EAA2BV,EAA3BU,YAAaE,EAAcZ,EAAdY,UACrB,OACIX,EAAAC,EAAAC,cAACG,EAAD,CACIO,UAAUH,EACVA,YAAaA,EACbI,QAASF,GAERZ,EAAMK,2oBCxBnB,IAAMU,EAAkBR,IAAOS,IAAVC,KAoDNC,EATE,SAAAlB,GACb,OACIC,EAAAC,EAAAC,cAACY,EAAD,KACId,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,+hBC5CZ,IAAMgB,EAAyBZ,IAAOS,IAAVI,IAUhB,SAAAC,GACJ,IADqCA,EAA9BC,wBAEH,MAAO,sBA6BJC,EArBS,SAAAvB,GAAS,IACrBY,EAA0DZ,EAA1DY,UAAWY,EAA+CxB,EAA/CwB,KAAMd,EAAyCV,EAAzCU,YAAaY,EAA4BtB,EAA5BsB,wBAEtC,OAEIrB,EAAAC,EAAAC,cAAEgB,EAAF,CACIG,wBAAyBA,GACzBrB,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACuB,EAAD,CACIhB,YAAaA,EACbE,UAAWA,EACXY,KAAMA,GAHV,wRC9BZ,IAAMG,EAAQpB,IAAOS,IAAVY,KA6BIC,EAfD,SAAA7B,GAAS,IACX8B,EAAmC9B,EAAnC8B,OAAQC,EAA2B/B,EAA3B+B,WAAYC,EAAehC,EAAfgC,WAGtBC,EAAqB,CAAEC,gBADTJ,EAASC,EAAa,WAG1C,OACI9B,EAAAC,EAAAC,cAACwB,EAAD,CACIQ,MAAOF,EACPnB,QAASkB,kICtBrB,IAAMI,EAAe7B,IAAOS,IAAVqB,KA0BHC,EAnBA,SAAAtC,GAEX,IAAMuC,EAAiBvC,EAAMuC,eAAeC,IAAI,SAAAX,GAAK,OACjD5B,EAAAC,EAAAC,cAACsC,EAAD,CACIC,IAAKb,EAAMc,GACXZ,WAAYF,EAAMe,MAClBd,OAAQD,EAAMC,OACdE,WAAY,SAAAa,GAAC,OAAI7C,EAAMgC,WAAWa,EAAGhB,EAAMc,SAKnD,OACI1C,EAAAC,EAAAC,cAACiC,EAAD,KACKG,8VCvBb,IAAMO,EAAQvC,IAAOwC,GAAVC,IAQE,SAAAhD,GACL,OAAIA,EAAMiD,SACC,oBACF,OAsBFC,EAZQ,SAAAlD,GAAS,IACpBwB,EAAmBxB,EAAnBwB,KAAMyB,EAAajD,EAAbiD,SAEd,OAEIhD,EAAAC,EAAAC,cAAC2C,EAAD,CACIG,SAAUA,GADd,4BAE0BhD,EAAAC,EAAAC,cAAA,YAAOqB,EAAP,8bC5BlC,IAAM2B,EAAc5C,IAAO6C,KAAVC,IAMJ,SAAArD,GACL,OAAIA,EAAMiD,SAAiB,oBACpB,kBA+CAK,EA3BI,SAAAtD,GAAS,IAEhBuD,EAAkEvD,EAAlEuD,eAAgBC,EAAkDxD,EAAlDwD,kBAAmBP,EAA+BjD,EAA/BiD,SAAUQ,EAAqBzD,EAArByD,KAAMC,EAAe1D,EAAf0D,WAE3D,OACIzD,EAAAC,EAAAC,cAACgD,EAAD,CACII,eAAgBA,EAChBI,SAAUH,EACVP,SAAUA,GACVhD,EAAAC,EAAAC,cAAA,SACIyD,QAAQ,QADZ,oBAEA3D,EAAAC,EAAAC,cAAA,SACI0D,YAAY,iBACZC,KAAK,OACLnB,GAAG,OACHoB,MAAON,EACPO,SAAUN,IAEdzD,EAAAC,EAAAC,cAAA,UACIU,WAAUoC,GADd,uBCrCGgB,EAVG,SAAAjE,GAAS,IACfwB,EAAexB,EAAfwB,KAAMiC,EAASzD,EAATyD,KACd,OACIxD,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKsD,GACLxD,EAAAC,EAAAC,cAAA,UAAKqB,4YCHjB,IAAM0C,EAA0B3D,IAAOS,IAAVmD,KAQvBC,EAAQ7D,IAAO8D,MAAVC,KAkDIC,EApCU,SAAAvE,GAAS,IAIxBwE,EAHqBxE,EAAnBuD,eAGuBf,IAAI,SAACiC,EAAQC,GAAT,OAC/BzE,EAAAC,EAAAC,cAACwE,EAAD,CACInD,KAAMiD,EAAOjD,KACbiC,KAAMgB,EAAOhB,KACbf,IAAKgC,MAIb,OACIzE,EAAAC,EAAAC,cAAC+D,EAAD,KAGIjE,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAACiE,EAAD,KAEInE,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBAGRF,EAAAC,EAAAC,cAAA,aACKqE,sXChDrB,IAAMI,EAAsBrE,IAAOS,IAAV6D,KAmDVC,EA9BM,SAAA9E,GAAS,IAElB+E,EAAoB/E,EAApB+E,eACJC,EAAU,gCAed,OAbuB,IAAnBD,EACAC,EAAO,iCAEFD,EAAiB,GAAKA,EAAiB,EAC5CC,EAAO,YACAD,GAAkB,GAAKA,GAAkB,GAChDC,EAAO,8DACAD,EAAiB,KACxBC,EAAO,qCAOP/E,EAAAC,EAAAC,cAACyE,EAAD,KAGI3E,EAAAC,EAAAC,cAAA,4BAAoB4E,GACpB9E,EAAAC,EAAAC,cAAA,YAAO6E,gbC5CZ,IAAMC,EAAe1E,IAAOS,IAAVkE,KA+BVC,EANC,SAAAnF,GACd,OACEC,EAAAC,EAAAC,cAAC8E,EAAD,qoBCtBJ,IAAMG,GAAuB7E,IAAOS,IAAVqE,KAWZ,SAAAhE,GAA6B,IAA1BiE,EAA0BjE,EAA1BiE,cAAe9D,EAAWH,EAAXG,KACxB,OAAK8D,GAAiB9D,EAAO,EAClB,gBAEJ,sBAQT+D,GAA6BhF,IAAOS,IAAVwE,IACnB,SAAAxF,GACL,GAAIA,EAAMiD,SAAU,MAAO,oBAGrB,SAAAjD,GACN,OAAIA,EAAMiD,SAAiB,MACpB,QAaTwC,GAAM,8CAiIGC,8MA7HXC,MAAQ,CACJlC,KAAM,GACNF,eAAgB,GAChBN,UAAU,EACV8B,eAAgB,MAGpBa,kBAAoB,SAAA/C,GAChBA,EAAEgD,iBACFC,EAAKC,SAAS,CAAEtC,KAAMZ,EAAEmD,OAAOjC,WAInCkC,yBAA2B,SAAApD,GACvBA,EAAEgD,iBAD0B,IAEpBpC,EAASqC,EAAKH,MAAdlC,KAEFgB,EAAS,CAAEhB,OAAMjC,KADVsE,EAAK9F,MAAMwB,MAEpBiC,GACAqC,EAAKC,SAAS,CAAE9C,UAAU,IAE1BiD,IAAMC,KAAKV,GAAKhB,GACX2B,KAAK,SAAAC,GACFH,IAAMI,IAAIb,IACLW,KAAK,SAAAC,GACF,IAAIE,EAAOC,OAAOC,OAAOJ,EAAIE,MACvBG,EAAQ,GACdH,EAAK/D,IAAI,SAAAiC,GAAM,OACXiC,EAAMC,KAAKlC,EAAOjD,QAGtB,IAAMuD,EAAiB,EAAI2B,EAAME,KAAK,SAAC1G,EAAG2G,GACtC,OAAO3G,EAAI2G,IACZC,UAAU,SAAAtF,GAAI,OACbA,IAASsE,EAAK9F,MAAMwB,OAcxB+E,EAAKK,KAXL,SAAiB1G,EAAG2G,GAChB,IAAME,EAAQ7G,EAAEsB,KACVwF,EAAQH,EAAErF,KACZyF,EAAa,EAMjB,OALIF,EAAQC,EACRC,EAAa,EACNF,EAAQC,IACfC,GAAc,GAEXA,IAGXV,EAAOA,EAAKW,OAAO,EAAG,IAEtBpB,EAAKC,SAAS,CAAExC,eAAgBgD,EAAMxB,wBAMtDoC,MAAM,uGAKKC,EAAWC,GAAW,IAAAC,EAAAC,KACjCF,EAAU9D,eAAeiE,OAAS,GAAKD,KAAKvH,MAAMsF,eAClDmC,WAAW,WACPH,EAAKvB,SAAS,CAAExC,eAAgB,GAAIN,UAAU,EAAO8B,eAAgB,GAAItB,KAAM,MAChF,sCAMF,IAAAiE,EAEsDH,KAAK5B,MAAxDlC,EAFHiE,EAEGjE,KAAMR,EAFTyE,EAESzE,SAAUM,EAFnBmE,EAEmBnE,eAAgBwB,EAFnC2C,EAEmC3C,eAFnC4C,EAG2BJ,KAAKvH,MAA7BwB,EAHHmG,EAGGnG,KAAM8D,EAHTqC,EAGSrC,cAId,OACIrF,EAAAC,EAAAC,cAACiF,GAAD,CACIE,cAAeA,EACf9D,KAAMA,GAENvB,EAAAC,EAAAC,cAACyH,EAAD,CACI3E,SAAUA,EACVzB,KAAMA,IAGVvB,EAAAC,EAAAC,cAACoF,GAAD,CACItC,SAAUA,GAETM,EAAeiE,OAAS,GAAKvH,EAAAC,EAAAC,cAAC0H,EAAD,CAC1BtE,eAAgBA,EAChBN,SAAUA,IAGdhD,EAAAC,EAAAC,cAAC2H,EAAD,CACI7E,SAAUA,EACVM,eAAgBA,EAChBC,kBAAmB+D,KAAKtB,yBACxBxC,KAAMA,EACNC,WAAY6D,KAAK3B,oBAEM,IAA1BrC,EAAeiE,QAAgBvE,GAAYhD,EAAAC,EAAAC,cAAC4H,EAAD,OAKhD9H,EAAAC,EAAAC,cAAC6H,EAAD,CACIjD,eAAgBA,IAGpB9E,EAAAC,EAAAC,cAACuB,EAAD,CACIhB,YAAa6G,KAAKvH,MAAMU,YACxBE,UAAW2G,KAAKvH,MAAMY,UACtB2C,eAAgBA,GAHpB,uBApHY0E,aC4HbC,8MAtKbvC,MAAQ,CACNwC,UAAW,GACX5F,eAAgB,GAChB7B,aAAa,EACb4E,eAAe,EACf8C,cAAe,GACfC,MAAM,EACN7G,KAAM,EACN8G,WAAY,GACZhH,yBAAyB,KAe3BiH,4BAA8B,WAK5B,IAFA,IAAMC,EAAchC,OAAAiC,EAAA,EAAAjC,CAAOV,EAAKH,MAAMwC,WAChCA,EAAY,GACTO,EAAI,EAAGA,EAAI5C,EAAKH,MAAMwC,UAAUX,OAAQkB,IAAK,CACpD,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWH,EAAehB,QACzDW,EAAUxB,KAAK6B,EAAeG,IAC9BH,EAAetB,OAAOyB,EAAQ,GAOhC,IAfkC,IAW1BpG,EAAmBuD,EAAKH,MAAxBpD,eACFuG,EAAiBX,EAAUjB,OAAO,EAAG,GAErC6B,EAAiBD,EAAeE,OAAOF,GACpCJ,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWI,EAAevB,QACzDjF,EAAemG,GAAK,CAClB/F,GAAI+F,EACJ9F,MAAOmG,EAAeJ,GACtB7G,QAAQ,GAEViH,EAAe7B,OAAOyB,EAAQ,GAEhC7C,EAAKC,SAAS,CAAExD,iBAAgB7B,aAAa,OAgD/CuI,iBAAmB,WACjBC,QAAQC,IAAI,SACZrD,EAAKsD,8BACLtD,EAAKuD,mBACLvD,EAAKC,SAAS,CAAET,eAAe,EAAMhE,yBAAyB,EAAOZ,aAAa,OAGpF0I,4BAA8B,WAC5B,IAAM7G,EAAiBuD,EAAKH,MAAMpD,eAClCkF,WAAW,WACTlF,EAAe+G,QAAQ,SAAAzH,GAAK,OAAIA,EAAMC,QAAS,IAC/CgE,EAAKC,SAAS,CAAExD,oBACf,SAGL8G,iBAAmB,WACjB,IAAI7H,EAAO,EACXsE,EAAKyD,OAASC,YAAY,WACxBhI,IACAsE,EAAKC,SAAS,CAAEvE,UACf,QAILiI,oBAAsB,SAAC5G,EAAGF,GAAO,IAAA+E,EACW5B,EAAKH,MAAvCpD,EADuBmF,EACvBnF,eAAgB6F,EADOV,EACPU,cAClB1D,EAAQnC,EAAeuE,UAAU,SAAAjF,GAAK,OAC1CA,EAAMc,KAAOA,IAEXJ,EAAemC,GAAO5C,QACtBgE,EAAKH,MAAM0C,OACf9F,EAAemC,GAAO5C,QAAS,EAC/BsG,EAAczB,KAAKpE,EAAemC,IAClCoB,EAAKC,SAAS,CAAExD,iBAAgB6F,uGAnHd,IAAAd,EAAAC,KACZY,EAAeZ,KAAK5B,MAApBwC,UACNjC,IAAMI,IApBS,6CAqBZF,KAAK,SAAAC,GACJ8B,EAAY9B,EAAIE,KAChBe,EAAKvB,SAAS,CAAEoC,YAAWzH,aAAa,IACxC4G,EAAKiB,2EAiCQnB,EAAWC,GAAW,IAAAqC,EAAAnC,KAAAoC,EAOnBpC,KAAK5B,MAJvByC,EAHqCuB,EAGrCvB,cACA7F,EAJqCoH,EAIrCpH,eACA+F,EALqCqB,EAKrCrB,WAEAhD,GAPqCqE,EAMrCjJ,YANqCiJ,EAOrCrE,eAGwB,KAAtBgD,EAAWd,SAA6C,IAA5BH,EAAU/B,gBACxCsE,cAAcrC,KAAKgC,QACnBhC,KAAKxB,SAAS,CAAErF,aAAa,EAAO4E,eAAe,EAAOgD,WAAY,KACjEjB,EAAU3G,aACb+G,WAAW,WACTiC,EAAKnB,+BACJ,MAMHjD,GACsC,IAApCiC,KAAK5B,MAAMyC,cAAcZ,SACvBY,EAAc,GAAGxF,QAAUwF,EAAc,GAAGxF,OAC9C2E,KAAKxB,SAAS,CAAEsC,MAAM,IACtBZ,WAAW,WACTlF,EAAe6F,EAAc,GAAGzF,IAAIb,QAAS,EAC7CS,EAAe6F,EAAc,GAAGzF,IAAIb,QAAS,EAC7C4H,EAAK3D,SAAS,CAAExD,iBAAgB8F,MAAM,KACrC,OAEHC,EAAW3B,KAAKyB,EAAc,GAAGzF,IACjC2F,EAAW3B,KAAKyB,EAAc,GAAGzF,KAEnC4E,KAAKxB,SAAS,CAAEqC,cAAe,GAAIE,iDA8ChC,IAAAuB,EAG+EtC,KAAK5B,MAAnFpD,EAHDsH,EAGCtH,eAAgBf,EAHjBqI,EAGiBrI,KAAM8D,EAHvBuE,EAGuBvE,cAAe5E,EAHtCmJ,EAGsCnJ,YAAaY,EAHnDuI,EAGmDvI,wBAC1D,OACErB,EAAAC,EAAAC,cAAC2J,EAAD,KAEE7J,EAAAC,EAAAC,cAAC4J,EAAD,CACEzE,cAAeA,EACf1E,UAAW2G,KAAK0B,iBAChBzH,KAAMA,EACNd,YAAaA,EACbY,wBAAyBA,IAE3BrB,EAAAC,EAAAC,cAAC6J,EAAD,CACEhI,WAAYuF,KAAKkC,oBACjBlH,eAAgBA,EAChB0H,WAAY1C,KAAK2C,0BAEnBjK,EAAAC,EAAAC,cAACgK,GAAD,CACEzJ,YAAaA,EACb4E,cAAeA,EACf9D,KAAMA,EACNZ,UAAW2G,KAAK0B,2BA/JRhB,aCLlBmC,IAASC,OAAOpK,EAAAC,EAAAC,cAACmK,GAAD,MAASC,SAASC,eAAe,Sf4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvE,KAAK,SAAAwE,GACjCA,EAAaC","file":"static/js/main.6ba77d8f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Montserrat', sans-serif;\r\n    overflow: hidden;\r\n}`\r\n\r\n\r\n\r\nconst layout = props => {\r\n\r\n    return (\r\n        <>\r\n            <GlobalStyle />\r\n            {props.children}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default layout;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\nflex-basis: 10%;\r\npadding: 0 6%;\r\nopacity: ${props => {\r\n        if (props.isGameReady) return '1'\r\n        return '.1'\r\n    }};\r\ntransition: opacity .4s;\r\nborder-radius: 100px;\r\nbackground-color: #059BE5;\r\nfont-size: 20px;\r\ncolor: #fff;\r\nfont-weight: 900;\r\nborder: none;\r\ncursor: pointer;\r\n`\r\nconst startGameButton = props => {\r\n    const { isGameReady, startGame } = props\r\n    return (\r\n        <Button\r\n            disabled={isGameReady ? false : true}\r\n            isGameReady={isGameReady}\r\n            onClick={startGame}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default startGameButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst GameInfoWrapper = styled.div`\r\nwidth: 80%;\r\nflex-basis: 60%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\ntext-align: justify;\r\nletter-spacing: 1px;\r\n\r\nh1{\r\n    font-size: 22px;\r\n    text-align: center;\r\n}\r\np{\r\n    margin-top: 5%;\r\n   color: #ddd;\r\n   line-height: 140%;\r\n}\r\n@media(min-width: 490px){\r\n    width: 60%;\r\n    p{\r\n        line-height: 160%;\r\n    }\r\n}\r\n@media (min-width: 800px){\r\n    width: 50%;\r\n    p{\r\n        line-height: 180%;\r\n    }\r\n}\r\n@media(min-width: 1200px){\r\n    width: 30%;\r\n    p{\r\n        line-height: 200%;\r\n    }\r\n}\r\n`\r\n\r\n\r\n\r\n\r\n\r\nconst GameInfo = props => {\r\n    return (\r\n        <GameInfoWrapper>\r\n            <h1>Memory Game!</h1>\r\n            <p>The game is simple - you have 9 pairs of colors to find as fast as you can. You will have 1 second to remember colors position. Start the game and let the timer begin! Compare your result with others!</p>\r\n        </GameInfoWrapper>\r\n    );\r\n};\r\n\r\nexport default GameInfo;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport StartGameButton from '../UI/Buttons/StartGameButton/StartGameButton'\r\nimport GameInfo from './GameInfo/GameInfo';\r\n\r\n\r\nconst StartGameWindowWrapper = styled.div`\r\nposition: absolute;\r\ntop: 0;\r\nleft: 0;\r\nheight: 100%;\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\ntransform:${({ isStartGameWindowActive }) => {\r\n        if (!isStartGameWindowActive) {\r\n            return 'translateX(-100%)'\r\n        }\r\n    }};\r\n    transition:  transform .4s;\r\nbackground-color: #222;\r\ncolor: #FFA611;\r\n`\r\n\r\nconst startGameWindow = props => {\r\n    const { startGame, time, isGameReady, isStartGameWindowActive } = props\r\n\r\n    return (\r\n\r\n        < StartGameWindowWrapper\r\n            isStartGameWindowActive={isStartGameWindowActive}>\r\n            <GameInfo />\r\n            <StartGameButton\r\n                isGameReady={isGameReady}\r\n                startGame={startGame}\r\n                time={time}>\r\n\r\n                Start Game\r\n                </StartGameButton>\r\n        </StartGameWindowWrapper >\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default startGameWindow;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Board = styled.div`\r\n    flex-basis: 15%;\r\n    flex-grow: 1;\r\n    height: 33.33vh;\r\n    box-shadow: 0 0 1px 1px #D3D3D3;\r\n\r\n@media(orientation: portrait){\r\n        height: 16.66vh;\r\n        flex-basis: 33.30%;\r\n}\r\n`\r\n\r\n\r\n\r\nconst board = props => {\r\n    const { isDone, boardColor, clickBoard } = props\r\n\r\n    const isBoardDone = isDone ? boardColor : '#484848'\r\n    const renderedBoardCokor = { backgroundColor: isBoardDone }\r\n\r\n    return (\r\n        <Board\r\n            style={renderedBoardCokor}\r\n            onClick={clickBoard}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default board;","import React from 'react';\r\nimport Board from './Board/Board';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst BoardWrapper = styled.div`\r\nheight: 100vh;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\n`\r\n\r\n\r\nconst boards = props => {\r\n\r\n    const renderedBoards = props.renderedBoards.map(board => (\r\n        <Board\r\n            key={board.id}\r\n            boardColor={board.color}\r\n            isDone={board.isDone}\r\n            clickBoard={e => props.clickBoard(e, board.id)}\r\n        />\r\n    ))\r\n\r\n\r\n    return (\r\n        <BoardWrapper>\r\n            {renderedBoards}\r\n        </BoardWrapper>\r\n    );\r\n};\r\n\r\nexport default boards;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Title = styled.h2`\r\ndisplay: flex;\r\nflex-basis: 15%;\r\nflex-flow: column nowrap;\r\njustify-content: space-between;\r\nalign-items: center;\r\nwidth: 90%;\r\nfont-size: 20px;\r\ntransform: ${props => {\r\n        if (props.isSended) {\r\n            return \"translateX(-110%)\"\r\n        } return null;\r\n    }};\r\ntransition: transform .4s, flex-basis 2s;\r\nspan{\r\n    display: block;\r\n    color: #FFA611;\r\n}\r\n`\r\n\r\n\r\nconst PlayerGameInfo = props => {\r\n    const { time, isSended } = props\r\n\r\n    return (\r\n\r\n        <Title\r\n            isSended={isSended}\r\n        >Well done! your time is: <span>{time} seconds!</span></Title>\r\n\r\n    );\r\n};\r\n\r\nexport default PlayerGameInfo;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FormWrapper = styled.form`\r\nheight: 100%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\ntransform: ${props => {\r\n        if (props.isSended) return \"translateX(+100%)\"\r\n        return 'translateX(0)'\r\n    }};\r\n    transition: .3s;\r\n\r\ninput{\r\n    flex-basis: 15%;\r\n    width: 70%;\r\n    text-align: center;\r\n}\r\nbutton{\r\n    background-color: #FF8964;\r\n    border: none;\r\n    padding: 10px;\r\n    border-radius: 50px;\r\n    font-weight: 900;\r\n}\r\n`\r\n\r\n\r\n\r\nconst SendResult = props => {\r\n\r\n    const { fetchedResults, postAndGetResults, isSended, name, changeName } = props\r\n\r\n    return (\r\n        <FormWrapper\r\n            fetchedResults={fetchedResults}\r\n            onSubmit={postAndGetResults}\r\n            isSended={isSended} >\r\n            <label\r\n                htmlFor=\"name\">Enter your name </label>\r\n            <input\r\n                placeholder='Your name here'\r\n                type=\"text\"\r\n                id='name'\r\n                value={name}\r\n                onChange={changeName} />\r\n\r\n            <button\r\n                disabled={isSended ? true : false}>\r\n                Send your result!\r\n                </button>\r\n        </FormWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default SendResult;","import React from 'react';\r\n\r\nconst OneResult = props => {\r\n    const { time, name } = props\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{time}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default OneResult;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport OneResult from './OneResult/OneResult';\r\n\r\nconst BestResultsBoardWrapper = styled.div`\r\nheight: 100%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\ntext-align: center;\r\n`\r\n\r\nconst Table = styled.table`\r\nwidth: 90%;\r\nmargin: 0 auto;\r\nbackground-color: #F6820D;\r\ncolor: #111;\r\ntr{\r\n    background-color: #FFCB2B;\r\n}\r\ntd{\r\n    color: #000;\r\n}\r\n`\r\n\r\n\r\nconst BestResultsBoard = props => {\r\n    const { fetchedResults } = props\r\n\r\n\r\n    const results = fetchedResults.map((result, index) => (\r\n        <OneResult\r\n            time={result.time}\r\n            name={result.name}\r\n            key={index}\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <BestResultsBoardWrapper\r\n\r\n        >\r\n            <h3>Top 10 best results</h3>\r\n            <Table\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {results}\r\n                </tbody>\r\n\r\n            </Table>\r\n\r\n        </BestResultsBoardWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default BestResultsBoard;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst YourPositionWrapper = styled.div`\r\nwidth: 90%;\r\nflex-basis: 15%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-between;\r\nalign-items: center;\r\ntext-align: center;\r\nspan,h3{\r\n    margin: auto; \r\n   \r\n}\r\nspan{\r\n    text-align: center;\r\n    transition: transform .4s;\r\n    display: block;\r\n    color: #FFA611;\r\n}\r\n`\r\n\r\n\r\nconst YourPosition = props => {\r\n\r\n    const { playerPosition, } = props\r\n    let message = \"Send your result to find out!\";\r\n\r\n    if (playerPosition === 1) {\r\n        message = `Wooohoo! You're the best here!`\r\n    }\r\n    else if (playerPosition > 1 && playerPosition < 5) {\r\n        message = `Good job!`\r\n    } else if (playerPosition >= 5 && playerPosition <= 10) {\r\n        message = `You have your name on the board! It's quite good, isn't it?`\r\n    } else if (playerPosition > 10) {\r\n        message = `Man...Stop afking, start playing.`\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <YourPositionWrapper\r\n        >\r\n\r\n            <h3>Your position: {playerPosition}</h3>\r\n            <span>{message}</span>\r\n        </YourPositionWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default YourPosition;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nexport const SpinnerStyle = styled.div`\r\n\r\n\r\n:before {\r\n  content: '';\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 60px;\r\n  top: calc(50% - 30px);\r\n  left: calc(50% - 30px);\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  border: 2px solid #ccc;\r\n  border-top-color: #333;\r\n  animation: spinner .6s linear infinite;\r\n}\r\n\r\n@keyframes spinner {\r\n  to {transform: rotate(360deg)}\r\n}\r\n \r\n\r\n`\r\n\r\n\r\nconst Spinner = props => {\r\n  return (\r\n    <SpinnerStyle />\r\n  );\r\n};\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport StartGameButton from '../UI/Buttons/StartGameButton/StartGameButton'\r\nimport PlayerGameInfo from './PlayerGameInfo/PlayerGameInfo';\r\nimport SendResultForm from './SendResultForm/SendResultForm';\r\nimport BestResultsBoard from './BestResultsBoard/BestResultsBoard';\r\nimport PlayerPosition from './PlayerPosition/PlayerPosition';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\nconst EndGameWindowWrapper = styled.div`\r\nposition: absolute;\r\ntop: 0;\r\nleft: 0;\r\nheight: 100%;\r\nwidth: 100%; \r\npadding: 10px;\r\ndisplay:flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\ntransform:  ${({ isGameRunning, time }) => {\r\n        if (!isGameRunning && time > 0) {\r\n            return 'translateY(0)'\r\n        }\r\n        return 'translateY(-100%)'\r\n    }};\r\ntransition: transform .5s;\r\nfont-size: 14px;\r\nbackground-color: #333;\r\ncolor: #ddd;\r\n`\r\n\r\nconst FormAndResultsBoardWrapper = styled.div`\r\ntransform: ${props => {\r\n        if (props.isSended) return 'translateY(-20%)'\r\n        return\r\n    }};\r\nflex-basis: ${props => {\r\n        if (props.isSended) return '55%'\r\n        return '40%'\r\n    }};\r\nwidth: 90%;\r\ntransition: .5s .2s;\r\nbackground-color: #222;\r\nbox-shadow: 0 0 25px 0 #F6820D;\r\nborder-radius: 20px;\r\ntext-align: center;\r\nposition: relative;\r\ntop:0;\r\nleft:0;\r\n`\r\n\r\nconst API = 'https://colors-results.firebaseio.com/.json'\r\nclass EndGameWindow extends Component {\r\n\r\n\r\n    state = {\r\n        name: '',\r\n        fetchedResults: [],\r\n        isSended: false,\r\n        playerPosition: '',\r\n    }\r\n\r\n    changeNameHandler = e => {\r\n        e.preventDefault()\r\n        this.setState({ name: e.target.value })\r\n    }\r\n\r\n\r\n    postAndGetResultsHandler = e => {\r\n        e.preventDefault()\r\n        const { name } = this.state\r\n        const time = this.props.time\r\n        const result = { name, time }\r\n        if (name) {\r\n            this.setState({ isSended: true })\r\n\r\n            axios.post(API, result)\r\n                .then(res => {\r\n                    axios.get(API)\r\n                        .then(res => {\r\n                            let data = Object.values(res.data);\r\n                            const times = [];\r\n                            data.map(result => (\r\n                                times.push(result.time)\r\n                            ))\r\n                                ;\r\n                            const playerPosition = 1 + times.sort((a, b) => {\r\n                                return a - b\r\n                            }).findIndex(time => (\r\n                                time === this.props.time\r\n                            ))\r\n\r\n                            function compare(a, b) {\r\n                                const timeA = a.time\r\n                                const timeB = b.time\r\n                                let comparison = 0;\r\n                                if (timeA > timeB) {\r\n                                    comparison = 1\r\n                                } else if (timeA < timeB) {\r\n                                    comparison = -1;\r\n                                }\r\n                                return comparison;\r\n                            }\r\n                            data.sort(compare)\r\n                            data = data.splice(0, 10);\r\n\r\n                            this.setState({ fetchedResults: data, playerPosition })\r\n                        })\r\n                }\r\n                )\r\n\r\n        } else {\r\n            alert('Enter your name!')\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.fetchedResults.length > 0 && this.props.isGameRunning) {\r\n            setTimeout(() => {\r\n                this.setState({ fetchedResults: [], isSended: false, playerPosition: '', name: '' })\r\n            }, 1000);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { name, isSended, fetchedResults, playerPosition } = this.state\r\n        const { time, isGameRunning } = this.props\r\n\r\n\r\n\r\n        return (\r\n            <EndGameWindowWrapper\r\n                isGameRunning={isGameRunning}\r\n                time={time} >\r\n\r\n                <PlayerGameInfo\r\n                    isSended={isSended}\r\n                    time={time} />\r\n\r\n\r\n                <FormAndResultsBoardWrapper\r\n                    isSended={isSended}>\r\n\r\n                    {fetchedResults.length > 0 && <BestResultsBoard\r\n                        fetchedResults={fetchedResults}\r\n                        isSended={isSended}\r\n                    />}\r\n\r\n                    <SendResultForm\r\n                        isSended={isSended}\r\n                        fetchedResults={fetchedResults}\r\n                        postAndGetResults={this.postAndGetResultsHandler}\r\n                        name={name}\r\n                        changeName={this.changeNameHandler} />\r\n\r\n                    {fetchedResults.length === 0 && isSended && <Spinner />}\r\n\r\n                </FormAndResultsBoardWrapper>\r\n\r\n\r\n                <PlayerPosition\r\n                    playerPosition={playerPosition}\r\n                />\r\n\r\n                <StartGameButton\r\n                    isGameReady={this.props.isGameReady}\r\n                    startGame={this.props.startGame}\r\n                    fetchedResults={fetchedResults}>\r\n                    Play Again!</StartGameButton>\r\n\r\n\r\n            </EndGameWindowWrapper>\r\n        );\r\n    }\r\n};\r\n\r\nexport default EndGameWindow;","import React, { Component } from 'react';\nimport Layout from '../components/Layout/Layout';\nimport StartGameWindow from '../components/StartGameWindow/StartGameWindow';\nimport Boards from '../components/Boards/Boards';\nimport EndGameWindow from '../components/EndGameWindow/EndGameWindow';\nimport axios from 'axios';\n\n\nconst COLORS_API = 'https://colors-a5386.firebaseio.com/.json'\n\nclass App extends Component {\n\n  state = {\n    allColors: [], // getting all colors here from API\n    renderedBoards: [], // colors for rendered boards (18)\n    isGameReady: false,\n    isGameRunning: false,\n    clickedBoards: [],\n    wait: false,\n    time: 0,\n    boardsDone: [],\n    isStartGameWindowActive: true, //this window is showed only once\n\n  }\n\n  // Getting all colors from API. CHANGING STATE: ISGAMEREADY : TRUE!\n  componentDidMount() {\n    let { allColors, } = this.state\n    axios.get(COLORS_API)\n      .then(res => {\n        allColors = res.data\n        this.setState({ allColors, isGameReady: true, })\n        this.createRenderedBoardsHandler()\n      })\n  }\n\n  createRenderedBoardsHandler = () => {\n\n    // Same allColors array, but with random position of each color\n    const temporaryArray = [...this.state.allColors]\n    const allColors = [];\n    for (let i = 0; i < this.state.allColors.length; i++) {\n      const random = Math.floor(Math.random() * temporaryArray.length)\n      allColors.push(temporaryArray[random])\n      temporaryArray.splice(random, 1)\n    }\n    //creating renderBoards color\n    const { renderedBoards } = this.state\n    const colorsToConcat = allColors.splice(0, 9)\n    // create duplicate, we need 18 position in an array (9x2)\n    const colorsToRender = colorsToConcat.concat(colorsToConcat)\n    for (let i = 0; i < 18; i++) {\n      const random = Math.floor(Math.random() * colorsToRender.length)\n      renderedBoards[i] = {\n        id: i,\n        color: colorsToRender[random],\n        isDone: true,\n      }\n      colorsToRender.splice(random, 1)\n    }\n    this.setState({ renderedBoards, isGameReady: true })\n  }\n\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(this.state.allColors)\n    const {\n      clickedBoards,\n      renderedBoards,\n      boardsDone,\n      isGameReady,\n      isGameRunning } = this.state\n\n\n    if (boardsDone.length === 18 && prevState.isGameRunning === true) {\n      clearInterval(this.timeID)\n      this.setState({ isGameReady: false, isGameRunning: false, boardsDone: [], })\n      if (!prevState.isGameReady) {\n        setTimeout(() => {\n          this.createRenderedBoardsHandler()\n        }, 2000)\n      }\n    }\n\n\n\n    if (isGameRunning) {\n      if (this.state.clickedBoards.length === 2) {\n        if (clickedBoards[0].color !== clickedBoards[1].color) {\n          this.setState({ wait: true })\n          setTimeout(() => {\n            renderedBoards[clickedBoards[0].id].isDone = false\n            renderedBoards[clickedBoards[1].id].isDone = false\n            this.setState({ renderedBoards, wait: false })\n          }, 350)\n        } else {\n          boardsDone.push(clickedBoards[0].id)\n          boardsDone.push(clickedBoards[1].id)\n        }\n        this.setState({ clickedBoards: [], boardsDone, })\n      }\n    }\n\n  }\n\n\n  // STARTIN THE GAME, FUNCTION BELOW ARE TRIGGERED HERE\n  startGameHandler = () => {\n    console.log('djest');\n    this.showBoardsForASecondHandler();\n    this.countTimeHandler();\n    this.setState({ isGameRunning: true, isStartGameWindowActive: false, isGameReady: false })\n  }\n  // works ok\n  showBoardsForASecondHandler = () => {\n    const renderedBoards = this.state.renderedBoards\n    setTimeout(() => {\n      renderedBoards.forEach(board => board.isDone = false)\n      this.setState({ renderedBoards })\n    }, 1400);\n  }\n\n  countTimeHandler = () => {\n    let time = 0;\n    this.timeID = setInterval(() => {\n      time++;\n      this.setState({ time })\n    }, 1000);\n  }\n\n  // CLICK ON BOARD FUNCTION\n  clickOnBoardHandler = (e, id) => {\n    const { renderedBoards, clickedBoards } = this.state\n    const index = renderedBoards.findIndex(board => (\n      board.id === id\n    ))\n    if (renderedBoards[index].isDone) return\n    if (this.state.wait) return\n    renderedBoards[index].isDone = true;\n    clickedBoards.push(renderedBoards[index])\n    this.setState({ renderedBoards, clickedBoards })\n  }\n\n\n\n  render() {\n\n\n    const { renderedBoards, time, isGameRunning, isGameReady, isStartGameWindowActive } = this.state\n    return (\n      <Layout>\n\n        <StartGameWindow\n          isGameRunning={isGameRunning}\n          startGame={this.startGameHandler}\n          time={time}\n          isGameReady={isGameReady}\n          isStartGameWindowActive={isStartGameWindowActive}\n        />\n        <Boards\n          clickBoard={this.clickOnBoardHandler}\n          renderedBoards={renderedBoards}\n          giveColors={this.giveRandomColorsHandler} />\n\n        <EndGameWindow\n          isGameReady={isGameReady}\n          isGameRunning={isGameRunning}\n          time={time}\n          startGame={this.startGameHandler}\n        />\n      </Layout>\n\n\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}