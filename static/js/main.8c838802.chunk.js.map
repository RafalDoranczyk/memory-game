{"version":3,"sources":["serviceWorker.js","Variables/theme.js","Variables/colors.js","Variables/mixins.js","components/Layout/Layout.js","components/UI/Buttons/StartGameButton/StartGameButton.js","components/StartGameWindow/GameInfo/GameInfo.js","components/StartGameWindow/StartGameWindow.js","components/Boards/Board/Board.js","components/Boards/Boards.js","components/EndGameWindow/PlayerGameInfo/PlayerGameInfo.js","components/EndGameWindow/SendResultForm/SendResultForm.js","components/EndGameWindow/BestResultsBoard/OneResult/OneResult.js","components/EndGameWindow/BestResultsBoard/BestResultsBoard.js","components/EndGameWindow/PlayerPosition/PlayerPosition.js","components/UI/Spinner/Spinner.js","components/EndGameWindow/EndGameWindow.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","theme","colors","primary","orange","blue","darkBackground","dark","mixins","absolutePosition","top","left","position","concat","relativePosition","GlobalStyle","createGlobalStyle","_templateObject","layout","props","react_default","a","createElement","styled_components_browser_esm","Fragment","children","Button","styled","button","StartGameButton_templateObject","isGameReady","_ref","_ref2","_ref3","_ref4","startGameButton","startGame","disabled","onClick","GameInfoWrapper","div","GameInfo_templateObject","GameInfo","StartGameWindowWrapper","StartGameWindow_templateObject","isStartGameWindowActive","startGameWindow","time","StartGameWindow_GameInfo_GameInfo","StartGameButton","Board","Board_templateObject","board","isDone","boardColor","clickBoard","renderedBoardCokor","backgroundColor","style","BoardWrapper","Boards_templateObject","boards","renderedBoards","map","Board_Board","key","id","color","e","Title","h2","PlayerGameInfo_templateObject","isSended","PlayerGameInfo","FormWrapper","form","SendResultForm_templateObject","SendResult","fetchedResults","postAndGetResults","name","changeName","onSubmit","htmlFor","placeholder","type","value","onChange","OneResult","BestResultsBoardWrapper","BestResultsBoard_templateObject","Table","table","_templateObject2","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","BestResultsBoard","results","result","index","BestResultsBoard_OneResult_OneResult","YourPositionWrapper","PlayerPosition_templateObject","YourPosition","playerPosition","message","SpinnerStyle","Spinner_templateObject","Spinner","EndGameWindowWrapper","EndGameWindow_templateObject","isGameRunning","FormAndResultsBoardWrapper","EndGameWindow_templateObject2","API","EndGameWindow","state","changeNameHandler","preventDefault","_this","setState","target","postAndGetResultsHandler","axios","post","then","res","get","data","Object","values","times","push","sort","b","findIndex","timeA","timeB","comparison","splice","alert","prevProps","prevState","_this2","this","length","setTimeout","_this$state","_this$props","EndGameWindow_PlayerGameInfo_PlayerGameInfo","EndGameWindow_BestResultsBoard_BestResultsBoard","SendResultForm","UI_Spinner_Spinner","PlayerPosition","Component","App","allColors","clickedBoards","wait","boardsDone","createRenderedBoardsHandler","temporaryArray","toConsumableArray","i","random","Math","floor","colorsToConcat","colorsToRender","startGameHandler","console","log","showBoardsForASecondHandler","countTimeHandler","forEach","timeID","setInterval","clickOnBoardHandler","_this3","_this$state2","clearInterval","_this$state3","Layout","StartGameWindow","Boards","giveColors","giveRandomColorsHandler","components_EndGameWindow_EndGameWindow","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c838802.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { colors } from './colors'\r\nimport { mixins } from './mixins'\r\nexport const theme = {\r\n    colors,\r\n    mixins\r\n}","export const colors = {\r\n    primary: '#fff',\r\n    orange: '#FFA611',\r\n    blue: '#059BE5',\r\n    darkBackground: '#222',\r\n    dark: '#000',\r\n}","export const mixins = {\r\n    absolutePosition: (top, left) => (\r\n        {\r\n            position: 'absolute',\r\n            top: `${top}% `,\r\n            left: `${left}% `,\r\n        }\r\n    ),\r\n    relativePosition: (top, left) => (\r\n        {\r\n            position: 'relative',\r\n            top: `${top}% `,\r\n            left: `${left}% `,\r\n        }\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\r\nimport { theme } from '../../Variables/theme';\r\nconst GlobalStyle = createGlobalStyle`\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    overflow: hidden;\r\n\r\n}\r\n:root{\r\n    font-size: 10px;\r\n    font-family: 'Montserrat', sans-serif;\r\n}\r\nbutton{\r\n    cursor: pointer;\r\n    border: none;\r\n    letter-spacing: 1px;\r\n}\r\n\r\n`\r\n\r\nconst layout = props => {\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <>\r\n                <GlobalStyle />\r\n                {props.children}\r\n            </>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default layout;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\nflex-basis: 10%;\r\npadding: 0 5%;\r\nopacity: ${props => {\r\n        if (props.isGameReady) return '1'\r\n        return '.1'\r\n    }};\r\ntransition: opacity .4s;\r\nborder-radius: 100px;\r\nfont-size: 2rem;\r\nbackground-color: ${({ theme }) => theme.colors.blue};\r\ncolor: ${({ theme }) => theme.colors.primary};\r\ntransition: .4s;\r\n\r\n:hover{\r\n    color : ${({ theme }) => theme.colors.blue};\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n}\r\n`\r\nconst startGameButton = props => {\r\n    const { isGameReady, startGame } = props\r\n    return (\r\n        <Button\r\n            disabled={isGameReady ? false : true}\r\n            isGameReady={isGameReady}\r\n            onClick={startGame}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default startGameButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst GameInfoWrapper = styled.div`\r\nwidth: 80%;\r\nflex-basis: 60%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\ntext-align: justify;\r\nletter-spacing: 1px;\r\nfont-size: 1.4rem;\r\n\r\nh1{\r\n    text-align: center;\r\n    color: ${({ theme }) => theme.colors.orange}\r\n}\r\np{\r\n    margin-top: 5%;\r\n   color: ${({ theme }) => theme.colors.primary};\r\n   line-height: 140%;\r\n}\r\n@media(min-width: 490px){\r\n    width: 60%;\r\n    p{\r\n        line-height: 160%;\r\n    }\r\n}\r\n@media (min-width: 800px){\r\n    width: 50%;\r\n    p{\r\n        line-height: 180%;\r\n    }\r\n}\r\n@media(min-width: 1200px){\r\n    width: 30%;\r\n    p{\r\n        line-height: 200%;\r\n    }\r\n}\r\n`\r\n\r\n\r\n\r\n\r\n\r\nconst GameInfo = props => {\r\n    return (\r\n        <GameInfoWrapper >\r\n            <h1>Memory Game!</h1>\r\n            <p>The game is simple - you have 9 pairs of colors to find as fast as you can. You will have 1 second to remember colors position. Start the game and let the timer begin! Compare your result with others!</p>\r\n        </GameInfoWrapper>\r\n    );\r\n};\r\n\r\nexport default GameInfo;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport StartGameButton from '../UI/Buttons/StartGameButton/StartGameButton'\r\nimport GameInfo from './GameInfo/GameInfo';\r\n\r\n\r\nconst StartGameWindowWrapper = styled.div`\r\n${({ theme }) => theme.mixins.absolutePosition(0, 0)}\r\nheight: 100%;\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\ntransform:${({ isStartGameWindowActive }) => {\r\n        if (!isStartGameWindowActive) {\r\n            return 'translateX(-100%)'\r\n        }\r\n    }};\r\n    transition:  transform .4s;\r\nbackground-color: ${({ theme }) => theme.colors.darkBackground};\r\n`\r\n\r\nconst startGameWindow = props => {\r\n    const { startGame, time, isGameReady, isStartGameWindowActive } = props\r\n\r\n    return (\r\n\r\n        < StartGameWindowWrapper\r\n            isStartGameWindowActive={isStartGameWindowActive}>\r\n            <GameInfo />\r\n            <StartGameButton\r\n                isGameReady={isGameReady}\r\n                startGame={startGame}\r\n                time={time}>\r\n\r\n                Start Game\r\n                </StartGameButton>\r\n        </StartGameWindowWrapper >\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default startGameWindow;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Board = styled.div`\r\n    flex-basis: 15%;\r\n    flex-grow: 1;\r\n    height: 33.33vh;\r\n    box-shadow: 0 0 1px 1px #D3D3D3;\r\n\r\n@media(orientation: portrait){\r\n        height: 16.66vh;\r\n        flex-basis: 33.30%;\r\n}\r\n`\r\n\r\n\r\n\r\nconst board = props => {\r\n    const { isDone, boardColor, clickBoard } = props\r\n\r\n    const isBoardDone = isDone ? boardColor : '#484848'\r\n    const renderedBoardCokor = { backgroundColor: isBoardDone }\r\n\r\n    return (\r\n        <Board\r\n            style={renderedBoardCokor}\r\n            onClick={clickBoard}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default board;","import React from 'react';\r\nimport Board from './Board/Board';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst BoardWrapper = styled.div`\r\nheight: 100vh;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\n`\r\n\r\n\r\nconst boards = props => {\r\n\r\n    const renderedBoards = props.renderedBoards.map(board => (\r\n        <Board\r\n            key={board.id}\r\n            boardColor={board.color}\r\n            isDone={board.isDone}\r\n            clickBoard={e => props.clickBoard(e, board.id)}\r\n        />\r\n    ))\r\n\r\n\r\n    return (\r\n        <BoardWrapper>\r\n            {renderedBoards}\r\n        </BoardWrapper>\r\n    );\r\n};\r\n\r\nexport default boards;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Title = styled.h2`\r\ndisplay: flex;\r\nflex-basis: 10%;\r\nflex-flow: column nowrap;\r\njustify-content: space-between;\r\nalign-items: center;\r\nwidth: 90%;\r\nfont-size: 2rem;\r\ntransform: ${props => {\r\n        if (props.isSended) {\r\n            return \"translateX(-110%)\"\r\n        } return null;\r\n    }};\r\ntransition: transform .4s, flex-basis 2s .4s;\r\ncolor:  ${({ theme }) => theme.colors.primary};\r\nspan{\r\n    display: block;\r\n    color:  ${({ theme }) => theme.colors.orange};\r\n}\r\n`\r\n\r\n\r\nconst PlayerGameInfo = props => {\r\n    const { time, isSended } = props\r\n\r\n    return (\r\n\r\n        <Title\r\n            isSended={isSended}\r\n        >Well done! Your time is: <span>{time} seconds!</span></Title>\r\n\r\n    );\r\n};\r\n\r\nexport default PlayerGameInfo;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FormWrapper = styled.form`\r\nheight: 100%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\ntransform: ${props => {\r\n        if (props.isSended) return \"translateX(+100%)\"\r\n        return 'translateX(0)'\r\n    }};\r\n    transition: .3s;\r\n    font-size: 1.5rem;\r\n\r\nlabel{\r\n    color: ${({ theme }) => theme.colors.primary}\r\n}\r\ninput{\r\n    flex-basis: 15%;\r\n    width: 70%;\r\n    text-align: center;\r\n}\r\n\r\nbutton{\r\n    font-weight: 700;\r\n    background-color: ${({ theme }) => theme.colors.orange};;\r\n    padding: 1.3rem;\r\n    border-radius: 50px;\r\n}\r\n`\r\n\r\n\r\n\r\nconst SendResult = props => {\r\n\r\n    const { fetchedResults, postAndGetResults, isSended, name, changeName } = props\r\n\r\n    return (\r\n        <FormWrapper\r\n            fetchedResults={fetchedResults}\r\n            onSubmit={postAndGetResults}\r\n            isSended={isSended} >\r\n            <label\r\n                htmlFor=\"name\">Enter your name </label>\r\n            <input\r\n                placeholder='Your name here'\r\n                type=\"text\"\r\n                id='name'\r\n                value={name}\r\n                onChange={changeName} />\r\n\r\n            <button\r\n                disabled={isSended ? true : false}>\r\n                Send your result!\r\n                </button>\r\n        </FormWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default SendResult;","import React from 'react';\r\n\r\nconst OneResult = props => {\r\n    const { time, name } = props\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{time}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default OneResult;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport OneResult from './OneResult/OneResult';\r\n\r\nconst BestResultsBoardWrapper = styled.div`\r\n${({ theme }) => theme.mixins.relativePosition(0, 0)}\r\nheight: 100%;\r\n\r\nh3{\r\n    ${({ theme }) => theme.mixins.absolutePosition(5, 0)}\r\n    width: 100%;\r\n    text-align: center;\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    font-size: 1.7rem;\r\n}\r\n\r\n`\r\n\r\nconst Table = styled.table`\r\n${({ theme }) => theme.mixins.absolutePosition(15, 5)}\r\nfont-size: 1.5rem;\r\nwidth: 90%;\r\nmargin: 0 auto;\r\nbackground-color: ${({ theme }) => theme.colors.orange};\r\ncolor: ${({ theme }) => theme.colors.orange};\r\n\r\nth{\r\n    color: ${({ theme }) => theme.colors.dark};\r\n    padding: .5rem;\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n}\r\n\r\ntr{\r\n    background-color: ${({ theme }) => theme.colors.blue};\r\n}\r\ntd{\r\n    color: ${({ theme }) => theme.colors.dark};\r\n}\r\n`\r\n\r\n\r\nconst BestResultsBoard = props => {\r\n    const { fetchedResults } = props\r\n\r\n\r\n    const results = fetchedResults.map((result, index) => (\r\n        <OneResult\r\n            time={result.time}\r\n            name={result.name}\r\n            key={index}\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <BestResultsBoardWrapper>\r\n            <h3>Top 10 best results</h3>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {results}\r\n                </tbody>\r\n\r\n            </Table>\r\n\r\n        </BestResultsBoardWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default BestResultsBoard;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst YourPositionWrapper = styled.div`\r\nwidth: 90%;\r\nflex-basis: 10%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-between;\r\nalign-items: center;\r\ntext-align: center;\r\nmargin-bottom: ${props => {\r\n        if (props.isSended) return '2rem'\r\n        return '0'\r\n    }};\r\ntransition: margin-bottom .4s;\r\n\r\nspan,h3{\r\n    margin: auto; \r\n}\r\nh3{\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    font-size: 1.8rem;\r\n}\r\nspan{\r\n    display: block;\r\n    text-align: center;\r\n    font-size: 1.6rem;\r\n    transition: transform .4s;\r\n    color: ${({ theme }) => theme.colors.orange};\r\n}\r\n`\r\n\r\n\r\nconst YourPosition = props => {\r\n\r\n    const { playerPosition, isSended } = props\r\n    let message = \"Send your result to find out!\";\r\n\r\n    if (playerPosition === 1) {\r\n        message = `Wooohoo! You're the best here!`\r\n    }\r\n    else if (playerPosition > 1 && playerPosition < 5) {\r\n        message = `Good job!`\r\n    } else if (playerPosition >= 5 && playerPosition <= 10) {\r\n        message = `You have your name on the board! It's quite good, isn't it?`\r\n    } else if (playerPosition > 10) {\r\n        message = `Man...Stop afking, start playing.`\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <YourPositionWrapper\r\n            isSended={isSended}\r\n        >\r\n\r\n            <h3>Your position: {playerPosition}</h3>\r\n            <span>{message}</span>\r\n        </YourPositionWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default YourPosition;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nexport const SpinnerStyle = styled.div`\r\n\r\n\r\n:before {\r\n  content: '';\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 60px;\r\n  top: calc(50% - 30px);\r\n  left: calc(50% - 30px);\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  border: 2px solid #ccc;\r\n  border-top-color: #333;\r\n  animation: spinner .6s linear infinite;\r\n}\r\n\r\n@keyframes spinner {\r\n  to {transform: rotate(360deg)}\r\n}\r\n \r\n\r\n`\r\n\r\n\r\nconst Spinner = props => {\r\n  return (\r\n    <SpinnerStyle />\r\n  );\r\n};\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport StartGameButton from '../UI/Buttons/StartGameButton/StartGameButton'\r\nimport PlayerGameInfo from './PlayerGameInfo/PlayerGameInfo';\r\nimport SendResultForm from './SendResultForm/SendResultForm';\r\nimport BestResultsBoard from './BestResultsBoard/BestResultsBoard';\r\nimport PlayerPosition from './PlayerPosition/PlayerPosition';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\nconst EndGameWindowWrapper = styled.div`\r\n${({ theme }) => theme.mixins.absolutePosition(0, 0)}\r\nheight: 100%;\r\nwidth: 100%; \r\npadding: 1rem;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\ntransform:  ${({ isGameRunning, time }) => {\r\n        if (!isGameRunning && time > 0) {\r\n            return 'translateY(0)'\r\n        } return 'translateY(-100%)'\r\n    }};\r\ntransition: transform .5s;\r\nbackground-color: ${({ theme }) => theme.colors.darkBackground};\r\ncolor: ${({ theme }) => theme.colors.primary};\r\n`\r\n\r\nconst FormAndResultsBoardWrapper = styled.div`\r\nflex-basis: ${({ isSended }) => isSended ? '60%' : '40%'};\r\ntransform: ${({ isSended }) => isSended ? 'translateY(-10%)' : '0'};\r\nwidth: 90%;\r\ntransition: .5s .5s;\r\nbackground-color: ${({ theme }) => theme.colors.darkBackground};\r\nbox-shadow: 0 0 25px 0 ${({ theme }) => theme.colors.orange};\r\nborder-radius: 2rem;\r\ntext-align: center;\r\nposition: relative;\r\ntop: 0;\r\nleft: 0;\r\n\r\n@media(min-width: 600px){\r\n    width: 80%;\r\n}\r\n@media(min-width: 800px){\r\n    width: 70%;\r\n}\r\n@media(min-width: 1000px){\r\n    width: 60%;\r\n}\r\n@media(min-width: 1200px){\r\n    width: 50%;\r\n}\r\n`\r\n\r\nconst API = 'https://colors-results.firebaseio.com/.json'\r\nclass EndGameWindow extends Component {\r\n\r\n\r\n    state = {\r\n        name: '',\r\n        fetchedResults: [],\r\n        isSended: false,\r\n        playerPosition: '',\r\n    }\r\n\r\n    changeNameHandler = e => {\r\n        e.preventDefault()\r\n        this.setState({ name: e.target.value })\r\n    }\r\n\r\n\r\n    postAndGetResultsHandler = e => {\r\n        e.preventDefault()\r\n        const { name } = this.state\r\n        const time = this.props.time\r\n        const result = { name, time }\r\n        if (name) {\r\n            this.setState({ isSended: true })\r\n\r\n            axios.post(API, result)\r\n                .then(res => {\r\n                    axios.get(API)\r\n                        .then(res => {\r\n                            let data = Object.values(res.data);\r\n                            const times = [];\r\n                            data.map(result => (\r\n                                times.push(result.time)\r\n                            ))\r\n                                ;\r\n                            const playerPosition = 1 + times.sort((a, b) => {\r\n                                return a - b\r\n                            }).findIndex(time => (\r\n                                time === this.props.time\r\n                            ))\r\n\r\n                            function compare(a, b) {\r\n                                const timeA = a.time\r\n                                const timeB = b.time\r\n                                let comparison = 0;\r\n                                if (timeA > timeB) {\r\n                                    comparison = 1\r\n                                } else if (timeA < timeB) {\r\n                                    comparison = -1;\r\n                                }\r\n                                return comparison;\r\n                            }\r\n                            data.sort(compare)\r\n                            data = data.splice(0, 10);\r\n\r\n                            this.setState({ fetchedResults: data, playerPosition })\r\n                        })\r\n                }\r\n                )\r\n\r\n        } else {\r\n            alert('Enter your name!')\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.fetchedResults.length > 0 && this.props.isGameRunning) {\r\n            setTimeout(() => {\r\n                this.setState({ fetchedResults: [], isSended: false, playerPosition: '', name: '' })\r\n            }, 1000);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { name, isSended, fetchedResults, playerPosition } = this.state\r\n        const { time, isGameRunning } = this.props\r\n\r\n\r\n\r\n        return (\r\n            <EndGameWindowWrapper\r\n                isGameRunning={isGameRunning}\r\n                time={time} >\r\n\r\n                <PlayerGameInfo\r\n                    isSended={isSended}\r\n                    time={time} />\r\n\r\n\r\n                <FormAndResultsBoardWrapper\r\n                    isSended={isSended}>\r\n\r\n                    {fetchedResults.length > 0 && <BestResultsBoard\r\n                        fetchedResults={fetchedResults}\r\n                        isSended={isSended}\r\n                    />}\r\n\r\n                    <SendResultForm\r\n                        isSended={isSended}\r\n                        fetchedResults={fetchedResults}\r\n                        postAndGetResults={this.postAndGetResultsHandler}\r\n                        name={name}\r\n                        changeName={this.changeNameHandler} />\r\n\r\n                    {fetchedResults.length === 0 && isSended && <Spinner />}\r\n\r\n                </FormAndResultsBoardWrapper>\r\n\r\n\r\n                <PlayerPosition\r\n                    isSended={isSended}\r\n                    playerPosition={playerPosition}\r\n                />\r\n\r\n                <StartGameButton\r\n                    isGameReady={this.props.isGameReady}\r\n                    startGame={this.props.startGame}\r\n                    fetchedResults={fetchedResults}>\r\n                    Play Again!</StartGameButton>\r\n\r\n\r\n            </EndGameWindowWrapper>\r\n        );\r\n    }\r\n};\r\n\r\nexport default EndGameWindow;","import React, { Component } from 'react';\nimport Layout from '../components/Layout/Layout';\nimport StartGameWindow from '../components/StartGameWindow/StartGameWindow';\nimport Boards from '../components/Boards/Boards';\nimport EndGameWindow from '../components/EndGameWindow/EndGameWindow';\nimport axios from 'axios';\n\n\nconst COLORS_API = 'https://colors-a5386.firebaseio.com/.json'\n\nclass App extends Component {\n\n  state = {\n    allColors: [], // getting all colors here from API\n    renderedBoards: [], // colors for rendered boards (18)\n    isGameReady: false,\n    isGameRunning: false,\n    clickedBoards: [],\n    wait: false,\n    time: 0,\n    boardsDone: [],\n    isStartGameWindowActive: true, //this window is showed only once\n\n  }\n\n  // Getting all colors from API. CHANGING STATE: ISGAMEREADY : TRUE!\n  componentDidMount() {\n    let { allColors, } = this.state\n    axios.get(COLORS_API)\n      .then(res => {\n        allColors = res.data\n        this.setState({ allColors, isGameReady: true, })\n        this.createRenderedBoardsHandler()\n      })\n  }\n\n  createRenderedBoardsHandler = () => {\n\n    // Same allColors array, but with random position of each color\n    const temporaryArray = [...this.state.allColors]\n    const allColors = [];\n    for (let i = 0; i < this.state.allColors.length; i++) {\n      const random = Math.floor(Math.random() * temporaryArray.length)\n      allColors.push(temporaryArray[random])\n      temporaryArray.splice(random, 1)\n    }\n    //creating renderBoards color\n    const { renderedBoards } = this.state\n    const colorsToConcat = allColors.splice(0, 9)\n    // create duplicate, we need 18 position in an array (9x2)\n    const colorsToRender = colorsToConcat.concat(colorsToConcat)\n    for (let i = 0; i < 18; i++) {\n      const random = Math.floor(Math.random() * colorsToRender.length)\n      renderedBoards[i] = {\n        id: i,\n        color: colorsToRender[random],\n        isDone: true,\n      }\n      colorsToRender.splice(random, 1)\n    }\n    this.setState({ renderedBoards, isGameReady: true })\n  }\n\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(this.state.allColors)\n    const {\n      clickedBoards,\n      renderedBoards,\n      boardsDone,\n      isGameRunning } = this.state\n\n\n    if (boardsDone.length === 18 && prevState.isGameRunning === true) {\n      clearInterval(this.timeID)\n      this.setState({ isGameReady: false, isGameRunning: false, boardsDone: [], })\n      if (!prevState.isGameReady) {\n        setTimeout(() => {\n          this.createRenderedBoardsHandler()\n        }, 2000)\n      }\n    }\n\n\n\n    if (isGameRunning) {\n      if (this.state.clickedBoards.length === 2) {\n        if (clickedBoards[0].color !== clickedBoards[1].color) {\n          this.setState({ wait: true })\n          setTimeout(() => {\n            renderedBoards[clickedBoards[0].id].isDone = false\n            renderedBoards[clickedBoards[1].id].isDone = false\n            this.setState({ renderedBoards, wait: false })\n          }, 350)\n        } else {\n          boardsDone.push(clickedBoards[0].id)\n          boardsDone.push(clickedBoards[1].id)\n        }\n        this.setState({ clickedBoards: [], boardsDone, })\n      }\n    }\n\n  }\n\n\n  // STARTIN THE GAME, FUNCTION BELOW ARE TRIGGERED HERE\n  startGameHandler = () => {\n    console.log('djest');\n    this.showBoardsForASecondHandler();\n    this.countTimeHandler();\n    this.setState({ isGameRunning: true, isStartGameWindowActive: false, isGameReady: false })\n  }\n  // works ok\n  showBoardsForASecondHandler = () => {\n    const renderedBoards = this.state.renderedBoards\n    setTimeout(() => {\n      renderedBoards.forEach(board => board.isDone = false)\n      this.setState({ renderedBoards })\n    }, 1400);\n  }\n\n  countTimeHandler = () => {\n    let time = 0;\n    this.timeID = setInterval(() => {\n      time++;\n      this.setState({ time })\n    }, 1000);\n  }\n\n  // CLICK ON BOARD FUNCTION\n  clickOnBoardHandler = (e, id) => {\n    const { renderedBoards, clickedBoards } = this.state\n    const index = renderedBoards.findIndex(board => (\n      board.id === id\n    ))\n    if (renderedBoards[index].isDone) return\n    if (this.state.wait) return\n    renderedBoards[index].isDone = true;\n    clickedBoards.push(renderedBoards[index])\n    this.setState({ renderedBoards, clickedBoards })\n  }\n\n\n\n  render() {\n\n\n    const { renderedBoards, time, isGameRunning, isGameReady, isStartGameWindowActive } = this.state\n    return (\n      <Layout>\n\n        <StartGameWindow\n          isGameRunning={isGameRunning}\n          startGame={this.startGameHandler}\n          time={time}\n          isGameReady={isGameReady}\n          isStartGameWindowActive={isStartGameWindowActive}\n        />\n        <Boards\n          clickBoard={this.clickOnBoardHandler}\n          renderedBoards={renderedBoards}\n          giveColors={this.giveRandomColorsHandler} />\n\n        <EndGameWindow\n          isGameReady={isGameReady}\n          isGameRunning={isGameRunning}\n          time={time}\n          startGame={this.startGameHandler}\n        />\n      </Layout>\n\n\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}