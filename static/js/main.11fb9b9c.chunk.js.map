{"version":3,"sources":["serviceWorker.js","Variables/theme.js","Variables/colors.js","Variables/mixins.js","components/Layout/Layout.js","components/UI/Buttons/StartGameButton/StartGameButton.js","components/StartGameWindow/GameInfo/GameInfo.js","components/StartGameWindow/StartGameWindow.js","components/Boards/Board/Board.js","components/Boards/Boards.js","components/EndGameWindow/PlayerGameInfo/PlayerGameInfo.js","components/EndGameWindow/SendResultForm/SendResultForm.js","components/EndGameWindow/BestResultsBoard/OneResult/OneResult.js","components/EndGameWindow/BestResultsBoard/BestResultsBoard.js","components/EndGameWindow/PlayerPosition/PlayerPosition.js","components/UI/Spinner/Spinner.js","components/EndGameWindow/EndGameWindow.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","theme","colors","primary","orange","blue","darkBackground","dark","silver","mixins","absolutePosition","top","left","position","concat","relativePosition","GlobalStyle","createGlobalStyle","_templateObject","layout","props","react_default","a","createElement","styled_components_browser_esm","Fragment","children","Button","styled","button","StartGameButton_templateObject","_ref","isGameReady","_ref2","_ref3","_ref4","_ref5","startGameButton","startGame","disabled","onClick","GameInfoWrapper","div","GameInfo_templateObject","GameInfo","StartGameWindowWrapper","StartGameWindow_templateObject","isStartGameWindowActive","startGameWindow","time","StartGameWindow_GameInfo_GameInfo","StartGameButton","Board","Board_templateObject","board","isDone","boardColor","clickBoard","renderedBoardCokor","backgroundColor","style","BoardWrapper","Boards_templateObject","boards","renderedBoards","map","Board_Board","key","id","color","e","Title","h2","PlayerGameInfo_templateObject","isSended","PlayerGameInfo","FormWrapper","form","SendResultForm_templateObject","SendResult","fetchedResults","postAndGetResults","name","changeName","onSubmit","htmlFor","placeholder","type","value","onChange","OneResult","BestResultsBoardWrapper","BestResultsBoard_templateObject","Table","table","_templateObject2","_ref6","_ref7","BestResultsBoard","results","result","index","BestResultsBoard_OneResult_OneResult","YourPositionWrapper","PlayerPosition_templateObject","YourPosition","playerPosition","message","SpinnerStyle","Spinner_templateObject","Spinner","EndGameWindowWrapper","EndGameWindow_templateObject","isGameRunning","FormAndResultsBoardWrapper","EndGameWindow_templateObject2","_ref8","API","EndGameWindow","state","changeNameHandler","preventDefault","_this","setState","target","postAndGetResultsHandler","axios","post","then","res","get","data","Object","values","times","push","sort","b","findIndex","timeA","timeB","comparison","splice","alert","prevProps","prevState","_this2","this","length","setTimeout","_this$state","_this$props","EndGameWindow_PlayerGameInfo_PlayerGameInfo","EndGameWindow_BestResultsBoard_BestResultsBoard","SendResultForm","UI_Spinner_Spinner","PlayerPosition","Component","App","allColors","clickedBoards","wait","boardsDone","createRenderedBoardsHandler","temporaryArray","toConsumableArray","i","random","Math","floor","colorsToConcat","colorsToRender","startGameHandler","showBoardsForASecondHandler","countTimeHandler","forEach","timeID","setInterval","clickOnBoardHandler","_this3","_this$state2","clearInterval","_this$state3","Layout","StartGameWindow","Boards","giveColors","giveRandomColorsHandler","components_EndGameWindow_EndGameWindow","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11fb9b9c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { colors } from './colors'\r\nimport { mixins } from './mixins'\r\nexport const theme = {\r\n    colors,\r\n    mixins\r\n}","export const colors = {\r\n    primary: '#fff',\r\n    orange: '#FFA611',\r\n    blue: '#059BE5',\r\n    darkBackground: '#222',\r\n    dark: '#000',\r\n    silver: '#D3D3D3',\r\n}","export const mixins = {\r\n    absolutePosition: (top, left) => (\r\n        {\r\n            position: 'absolute',\r\n            top: `${top}% `,\r\n            left: `${left}% `,\r\n        }\r\n    ),\r\n    relativePosition: (top, left) => (\r\n        {\r\n            position: 'relative',\r\n            top: `${top}% `,\r\n            left: `${left}% `,\r\n        }\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\r\nimport { theme } from '../../Variables/theme';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    *{\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n        overflow: hidden;\r\n        font-family: 'Montserrat', sans-serif;\r\n    }\r\n    :root{\r\n        font-size: 10px;\r\n    }\r\n    button{\r\n        cursor: pointer;\r\n        border: none;\r\n        letter-spacing: 1px;\r\n    }\r\n\r\n`\r\n\r\nconst layout = props => {\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <>\r\n                <GlobalStyle />\r\n                {props.children}\r\n            </>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default layout;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    flex-basis: 50px;\r\n    padding: 0 15px;\r\n    opacity: ${({isGameReady})=>isGameReady ? '1' : '.1'};\r\n    transition: opacity .4s;\r\n    border-radius: 100px;\r\n    font-size: 2rem;\r\n    background-color: ${({ theme }) => theme.colors.blue};\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    transition: .4s;\r\n    @media (orientation: landscape) {\r\n        font-size: 1.4rem;\r\n        flex-basis: 30px;\r\n        @media(min-width: 700px){\r\n            font-size: 3.5rem;\r\n            flex-basis: 80px;\r\n            padding: 20px;\r\n        }\r\n    }\r\n        \r\n:hover{\r\n    color : ${({ theme }) => theme.colors.blue};\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n}\r\n`\r\nconst startGameButton = props => {\r\n    const { isGameReady, startGame } = props\r\n    return (\r\n        <Button\r\n            disabled={isGameReady ? false : true}\r\n            isGameReady={isGameReady}\r\n            onClick={startGame}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default startGameButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst GameInfoWrapper = styled.div`\r\n    width: 80%;\r\n    flex-basis: 60%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    text-align: justify;\r\n    letter-spacing: 1px;\r\n    font-size: 1.4rem;\r\n    @media (min-width: 700px){\r\n        font-size: 1.8rem;\r\n    }\r\n   & h1{\r\n        text-align: center;\r\n        color: ${({ theme }) => theme.colors.orange}\r\n    }\r\n   & p{\r\n        margin-top: 5%;\r\n        color: ${({ theme }) => theme.colors.primary};\r\n        line-height: 140%;\r\n    }\r\n    @media(min-width: 490px){\r\n        width: 60%;\r\n        p{\r\n            line-height: 160%;\r\n        }\r\n    }\r\n    @media (min-width: 800px){\r\n        width: 50%;\r\n        p{\r\n            line-height: 180%;\r\n        }\r\n    }\r\n    @media(min-width: 1200px){\r\n        width: 30%;\r\n        p{\r\n            line-height: 200%;\r\n        }\r\n    }\r\n`\r\n\r\n\r\n\r\nconst GameInfo = () => {\r\n    return (\r\n        <GameInfoWrapper >\r\n            <h1>Memory Game!</h1>\r\n            <p>The game is simple - you have 9 pairs of colors to find as fast as you can. You will have 1 second to remember colors position. Start the game and let the timer begin! Compare your result with others!</p>\r\n        </GameInfoWrapper>\r\n    );\r\n};\r\n\r\nexport default GameInfo;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport StartGameButton from '../UI/Buttons/StartGameButton/StartGameButton'\r\nimport GameInfo from './GameInfo/GameInfo';\r\n\r\n\r\nconst StartGameWindowWrapper = styled.div`\r\n    ${({ theme }) => theme.mixins.absolutePosition(0, 0)}\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: center;;\r\n    align-items: center;\r\n    transform:${({ isStartGameWindowActive })=> !isStartGameWindowActive && 'translateX(-100%)' };\r\n    transition:  transform .4s;\r\n    background-color: ${({ theme }) => theme.colors.darkBackground};\r\n   \r\n`\r\n\r\nconst startGameWindow = props => {\r\n    const { startGame, time, isGameReady, isStartGameWindowActive } = props\r\n\r\n    return (\r\n\r\n        < StartGameWindowWrapper\r\n            isStartGameWindowActive={isStartGameWindowActive}>\r\n            <GameInfo />\r\n            <StartGameButton\r\n                isGameReady={isGameReady}\r\n                startGame={startGame}\r\n                time={time}>\r\n\r\n                Start Game\r\n                </StartGameButton>\r\n        </StartGameWindowWrapper >\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default startGameWindow;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Board = styled.div`\r\n    flex-basis: 15%;\r\n    flex-grow: 1;\r\n    height: 33.33vh;\r\n    box-shadow: 0 0 1px 1px ${({theme})=>theme.colors.silver};\r\n    cursor: pointer;\r\n    @media(orientation: portrait){\r\n            height: 16.66vh;\r\n            flex-basis: 33.30%;\r\n    }\r\n`\r\n\r\n\r\n\r\nconst board = props => {\r\n    const { isDone, boardColor, clickBoard } = props\r\n\r\n    const isBoardDone = isDone ? boardColor : '#484848'\r\n    const renderedBoardCokor = { backgroundColor: isBoardDone }\r\n\r\n    return (\r\n        <Board\r\n            style={renderedBoardCokor}\r\n            onClick={clickBoard}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default board;","import React from 'react';\r\nimport Board from './Board/Board';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst BoardWrapper = styled.div`\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n`\r\n\r\n\r\nconst boards = props => {\r\n\r\n    const renderedBoards = props.renderedBoards.map(board => (\r\n        <Board\r\n            key={board.id}\r\n            boardColor={board.color}\r\n            isDone={board.isDone}\r\n            clickBoard={e => props.clickBoard(e, board.id)}\r\n        />\r\n    ))\r\n\r\n\r\n    return (\r\n        <BoardWrapper>\r\n            {renderedBoards}\r\n        </BoardWrapper>\r\n    );\r\n};\r\n\r\nexport default boards;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Title = styled.h2`\r\n    flex-basis: 15%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 90%;\r\n    font-size: 2rem;\r\n    transform: ${({isSended})=> isSended && 'translateX(-110%)'};\r\n    transition: transform .4s, flex-basis 2s .4s;\r\n    color:  ${({ theme }) => theme.colors.primary};\r\n    @media (orientation: landscape){\r\n        font-size: 1.2rem;\r\n        @media(min-width: 700px){\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n    span{\r\n        display: block;\r\n        color:  ${({ theme }) => theme.colors.orange};\r\n    }\r\n`\r\n\r\n\r\nconst PlayerGameInfo = ({isSended,time}) => {\r\n\r\n    return (\r\n\r\n        <Title\r\n            isSended={isSended}\r\n        >Well done! Your time is: <span>{time} seconds!</span></Title>\r\n\r\n    );\r\n};\r\n\r\nexport default PlayerGameInfo;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FormWrapper = styled.form`\r\n    height: 100%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    transform: ${({isSended}) => isSended ? 'translateX(100%)': 'translateX(0)'};\r\n    transition: .3s;\r\n    font-size: 1.5rem;\r\n    @media (orientation:landscape){\r\n        font-size: 1.2rem;\r\n        @media(min-width: 700px){\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n    & label{\r\n        color: ${({ theme }) => theme.colors.primary}\r\n    }\r\n    & input{\r\n        flex-basis: 15%;\r\n        width: 70%;\r\n        max-width: 250px;\r\n        min-height: 30px;\r\n        text-align: center;\r\n    }\r\n\r\n    & button{\r\n        font-weight: 700;\r\n        background-color: ${({ theme }) => theme.colors.orange};;\r\n        padding: 10px;\r\n        border-radius: 50px;\r\n        @media (orientation: landscape){\r\n        font-size: 1rem;\r\n            @media(min-width: 700px){\r\n                font-size: 2rem;\r\n                padding: 15px 10px;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n\r\n\r\nconst SendResult = props => {\r\n\r\n    const { fetchedResults, postAndGetResults, isSended, name, changeName } = props\r\n\r\n    return (\r\n        <FormWrapper\r\n            fetchedResults={fetchedResults}\r\n            onSubmit={postAndGetResults}\r\n            isSended={isSended} >\r\n            <label\r\n                htmlFor=\"name\">Enter your name </label>\r\n            <input\r\n                placeholder='Your name here'\r\n                type=\"text\"\r\n                id='name'\r\n                value={name}\r\n                onChange={changeName} />\r\n\r\n            <button\r\n                disabled={isSended ? true : false}>\r\n                Send your result!\r\n                </button>\r\n        </FormWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default SendResult;","import React from 'react';\r\n\r\nconst OneResult = ({time, name}) => {\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{time}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default OneResult;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport OneResult from './OneResult/OneResult';\r\n\r\nconst BestResultsBoardWrapper = styled.div`\r\n    height: 100%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: center;\r\nh3{\r\n    flex-basis: 15%;\r\n    text-align: center;\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    font-size: 1.7rem;\r\n    @media (orientation: landscape){\r\n        font-size: 1.2rem;\r\n        @media (min-width: 700px){\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n}\r\n\r\n`\r\n\r\nconst Table = styled.table`\r\n    font-size: 1.5rem;\r\n    width: 70%;\r\n    margin: 0 auto;\r\n    flex-basis: 80%;\r\n    background-color: ${({ theme }) => theme.colors.orange};\r\n    color: ${({ theme }) => theme.colors.orange};\r\n\r\n    @media(orientation:landscape){\r\n        font-size: 1rem;\r\n        @media(min-width: 700px){\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n    th{\r\n        color: ${({ theme }) => theme.colors.dark};\r\n        padding: .5rem;\r\n        background-color: ${({ theme }) => theme.colors.primary};\r\n    }\r\n\r\n    tr{\r\n\r\n        background-color: ${({ theme }) => theme.colors.blue};\r\n    }\r\n    td{\r\n        color: ${({ theme }) => theme.colors.dark};\r\n    }\r\n`\r\n\r\n\r\nconst BestResultsBoard = props => {\r\n    const { fetchedResults } = props\r\n\r\n\r\n    const results = fetchedResults.map((result, index) => (\r\n        <OneResult\r\n            time={result.time}\r\n            name={result.name}\r\n            key={index}\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <BestResultsBoardWrapper>\r\n            <h3>Top 8 best results</h3>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {results}\r\n                </tbody>\r\n\r\n            </Table>\r\n\r\n        </BestResultsBoardWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default BestResultsBoard;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst YourPositionWrapper = styled.div`\r\n    width: 90%;\r\n    flex-basis: 15%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    text-align: center;\r\n    margin-bottom: ${({isSended})=> isSended? '2rem':'0'};\r\n    transition: margin-bottom .4s;\r\n    font-size: 1.5rem;\r\n    @media (orientation: landscape){\r\n        font-size: 1.2rem;\r\n        @media(min-width: 700px){\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n    span,h3{\r\n        margin: auto; \r\n\r\n    }\r\n    h3{\r\n        color: ${({ theme }) => theme.colors.primary};\r\n        font-size: 1em;\r\n    }\r\n    span{\r\n        display: block;\r\n        text-align: center;\r\n        font-size: 1.2em;\r\n        transition: transform .4s;\r\n        color: ${({ theme }) => theme.colors.orange};\r\n    }\r\n`\r\n\r\n\r\nconst YourPosition = ({playerPosition,isSended}) => {\r\n\r\n    let message = \"Send your result to find out!\";\r\n\r\n    if (playerPosition === 1) {\r\n        message = `Wooohoo! You're the best here!`\r\n    }\r\n    else if (playerPosition > 1 && playerPosition < 5) {\r\n        message = `Good job!`\r\n    } else if (playerPosition >= 5 && playerPosition <= 10) {\r\n        message = `You have your name on the board! It's quite good, isn't it?`\r\n    } else if (playerPosition > 10) {\r\n        message = `Man...Stop afking, start playing.`\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <YourPositionWrapper\r\n            isSended={isSended}\r\n        >\r\n\r\n            <h3>Your position: {playerPosition}</h3>\r\n            <span>{message}</span>\r\n        </YourPositionWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default YourPosition;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nexport const SpinnerStyle = styled.div`\r\n\r\n\r\n:before {\r\n  content: '';\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 60px;\r\n  top: calc(50% - 30px);\r\n  left: calc(50% - 30px);\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  border: 2px solid #ccc;\r\n  border-top-color: #333;\r\n  animation: spinner .6s linear infinite;\r\n}\r\n\r\n@keyframes spinner {\r\n  to {transform: rotate(360deg)}\r\n}\r\n \r\n\r\n`\r\n\r\n\r\nconst Spinner = props => {\r\n  return (\r\n    <SpinnerStyle />\r\n  );\r\n};\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport StartGameButton from '../UI/Buttons/StartGameButton/StartGameButton'\r\nimport PlayerGameInfo from './PlayerGameInfo/PlayerGameInfo';\r\nimport SendResultForm from './SendResultForm/SendResultForm';\r\nimport BestResultsBoard from './BestResultsBoard/BestResultsBoard';\r\nimport PlayerPosition from './PlayerPosition/PlayerPosition';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\nconst EndGameWindowWrapper = styled.div`\r\n    ${({ theme }) => theme.mixins.absolutePosition(0, 0)}\r\n    height: 100%;\r\n    width: 100%; \r\n    padding: 10px;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    transform:  ${({ isGameRunning, time }) => !isGameRunning && time>0 ? 'translateY(0)': 'translateY(-100%)'};\r\n    transition: transform .5s;\r\n    background-color: ${({ theme }) => theme.colors.darkBackground};\r\n    color: ${({ theme }) => theme.colors.primary};\r\n`\r\n\r\nconst FormAndResultsBoardWrapper = styled.div`\r\n    flex-basis: ${({ isSended }) => isSended ? '60%' : '45%'};\r\n    transform: ${({ isSended }) => isSended ? 'translateY(-10%)' : '0'};\r\n    width: 90%;\r\n    transition: .5s .5s;\r\n    background-color: ${({ theme }) => theme.colors.darkBackground};\r\n    box-shadow: 0 0 25px 0 ${({ theme }) => theme.colors.orange};\r\n    border-radius: 2rem;\r\n    text-align: center;\r\n    position: relative;\r\n    top: 0;\r\n    left: 0;\r\n    @media (orientation: landscape){\r\n        width: 70%;\r\n    }\r\n    @media(min-width: 600px){\r\n        width: 80%;\r\n    }\r\n    @media(min-width: 800px){\r\n        width: 70%;\r\n    }\r\n    @media(min-width: 1000px){\r\n        width: 60%;\r\n    }\r\n    @media(min-width: 1200px){\r\n        width: 50%;\r\n    }\r\n`\r\n\r\nconst API = 'https://colors-results.firebaseio.com/.json'\r\nclass EndGameWindow extends Component {\r\n\r\n\r\n    state = {\r\n        name: '',\r\n        fetchedResults: [],\r\n        isSended: false,\r\n        playerPosition: '',\r\n    }\r\n\r\n    changeNameHandler = e => {\r\n        e.preventDefault()\r\n        this.setState({ name: e.target.value })\r\n    }\r\n\r\n\r\n    postAndGetResultsHandler = e => {\r\n        e.preventDefault()\r\n        const { name } = this.state\r\n        const time = this.props.time\r\n        const result = { name, time }\r\n        if (name) {\r\n            this.setState({ isSended: true })\r\n\r\n            axios.post(API, result)\r\n                .then(res => {\r\n                    axios.get(API)\r\n                        .then(res => {\r\n                            let data = Object.values(res.data);\r\n                            const times = [];\r\n                            data.map(result => (\r\n                                times.push(result.time)\r\n                            ))\r\n                                ;\r\n                            const playerPosition = 1 + times.sort((a, b) => {\r\n                                return a - b\r\n                            }).findIndex(time => (\r\n                                time === this.props.time\r\n                            ))\r\n\r\n                            function compare(a, b) {\r\n                                const timeA = a.time\r\n                                const timeB = b.time\r\n                                let comparison = 0;\r\n                                if (timeA > timeB) {\r\n                                    comparison = 1\r\n                                } else if (timeA < timeB) {\r\n                                    comparison = -1;\r\n                                }\r\n                                return comparison;\r\n                            }\r\n                            data.sort(compare)\r\n                            data = data.splice(0, 8);\r\n\r\n                            this.setState({ fetchedResults: data, playerPosition })\r\n                        })\r\n                }\r\n                )\r\n\r\n        } else {\r\n            alert('Enter your name!')\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.fetchedResults.length > 0 && this.props.isGameRunning) {\r\n            setTimeout(() => {\r\n                this.setState({ fetchedResults: [], isSended: false, playerPosition: '', name: '' })\r\n            }, 1000);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { name, isSended, fetchedResults, playerPosition } = this.state\r\n        const { time, isGameRunning } = this.props\r\n\r\n\r\n\r\n        return (\r\n            <EndGameWindowWrapper\r\n                isGameRunning={isGameRunning}\r\n                time={time} >\r\n\r\n                <PlayerGameInfo\r\n                    isSended={isSended}\r\n                    time={time} />\r\n\r\n\r\n                <FormAndResultsBoardWrapper\r\n                    isSended={isSended}>\r\n\r\n                    {fetchedResults.length > 0 && <BestResultsBoard\r\n                        fetchedResults={fetchedResults}\r\n                        isSended={isSended}\r\n                    />}\r\n\r\n                    <SendResultForm\r\n                        isSended={isSended}\r\n                        fetchedResults={fetchedResults}\r\n                        postAndGetResults={this.postAndGetResultsHandler}\r\n                        name={name}\r\n                        changeName={this.changeNameHandler} />\r\n\r\n                    {fetchedResults.length === 0 && isSended && <Spinner />}\r\n\r\n                </FormAndResultsBoardWrapper>\r\n\r\n\r\n                <PlayerPosition\r\n                    isSended={isSended}\r\n                    playerPosition={playerPosition}\r\n                />\r\n\r\n                <StartGameButton\r\n                    isGameReady={this.props.isGameReady}\r\n                    startGame={this.props.startGame}\r\n                    fetchedResults={fetchedResults}>\r\n                    Play Again!</StartGameButton>\r\n\r\n            </EndGameWindowWrapper>\r\n        );\r\n    }\r\n};\r\n\r\nexport default EndGameWindow;","import React, { Component } from 'react';\r\nimport Layout from '../components/Layout/Layout';\r\nimport StartGameWindow from '../components/StartGameWindow/StartGameWindow';\r\nimport Boards from '../components/Boards/Boards';\r\nimport EndGameWindow from '../components/EndGameWindow/EndGameWindow';\r\nimport axios from 'axios';\r\n\r\n\r\nconst COLORS_API = 'https://colors-a5386.firebaseio.com/.json'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    allColors: [], // getting all colors here from API\r\n    renderedBoards: [], // colors for rendered boards (18)\r\n    isGameReady: false,\r\n    isGameRunning: false,\r\n    clickedBoards: [],\r\n    wait: false,\r\n    time: 0,\r\n    boardsDone: [],\r\n    isStartGameWindowActive: true, //this window is showed only once\r\n  }\r\n\r\n  // Getting all colors from API. CHANGING STATE: ISGAMEREADY : TRUE!\r\n  componentDidMount() {\r\n    let { allColors } = this.state\r\n    axios.get(COLORS_API)\r\n      .then(res => {\r\n        allColors = res.data\r\n        this.setState({ allColors, isGameReady: true, })\r\n        this.createRenderedBoardsHandler()\r\n      })\r\n  }\r\n\r\n  createRenderedBoardsHandler = () => {\r\n    // Same allColors array, but with random position of each color\r\n    const temporaryArray = [...this.state.allColors]\r\n    const allColors = [];\r\n    for (let i = 0; i < this.state.allColors.length; i++) {\r\n      const random = Math.floor(Math.random() * temporaryArray.length)\r\n      allColors.push(temporaryArray[random])\r\n      temporaryArray.splice(random, 1)\r\n    }\r\n    //creating renderBoards color\r\n    const { renderedBoards } = this.state\r\n    const colorsToConcat = allColors.splice(0, 9)\r\n    // create duplicate, we need 18 position in an array (9x2)\r\n    const colorsToRender = colorsToConcat.concat(colorsToConcat)\r\n    for (let i = 0; i < 18; i++) {\r\n      const random = Math.floor(Math.random() * colorsToRender.length)\r\n      renderedBoards[i] = {\r\n        id: i,\r\n        color: colorsToRender[random],\r\n        isDone: true,\r\n      }\r\n      colorsToRender.splice(random, 1)\r\n    }\r\n    this.setState({ renderedBoards, isGameReady: true })\r\n  }\r\n\r\n\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const {\r\n      clickedBoards,\r\n      renderedBoards,\r\n      boardsDone,\r\n      isGameRunning } = this.state\r\n\r\n    if (boardsDone.length === 18 && prevState.isGameRunning === true) {\r\n      clearInterval(this.timeID)\r\n      this.setState({ isGameReady: false, isGameRunning: false, boardsDone: [], })\r\n      if (!prevState.isGameReady) {\r\n        setTimeout(() => {\r\n          this.createRenderedBoardsHandler()\r\n        }, 2000)\r\n      }\r\n    }\r\n\r\n    if (isGameRunning) {\r\n      if (this.state.clickedBoards.length === 2) {\r\n        if (clickedBoards[0].color !== clickedBoards[1].color) {\r\n          this.setState({ wait: true })\r\n          setTimeout(() => {\r\n            renderedBoards[clickedBoards[0].id].isDone = false\r\n            renderedBoards[clickedBoards[1].id].isDone = false\r\n            this.setState({ renderedBoards, wait: false })\r\n          }, 350)\r\n        } else {\r\n          boardsDone.push(clickedBoards[0].id)\r\n          boardsDone.push(clickedBoards[1].id)\r\n        }\r\n        this.setState({ clickedBoards: [], boardsDone, })\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // STARTIN THE GAME, FUNCTION BELOW ARE TRIGGERED HERE\r\n  startGameHandler = () => {\r\n    this.showBoardsForASecondHandler();\r\n    this.countTimeHandler();\r\n    this.setState({ \r\n      isGameRunning: true,\r\n       isStartGameWindowActive: false,\r\n        isGameReady: false })\r\n  }\r\n  // works ok\r\n  showBoardsForASecondHandler = () => {\r\n    const renderedBoards = this.state.renderedBoards\r\n    setTimeout(() => {\r\n      renderedBoards.forEach(board => board.isDone = false)\r\n      this.setState({ renderedBoards })\r\n    }, 1400);\r\n  }\r\n\r\n  countTimeHandler = () => {\r\n    let time = 0;\r\n    this.timeID = setInterval(() => {\r\n      time++;\r\n      this.setState({ time })\r\n    }, 1000);\r\n  }\r\n\r\n  // CLICK ON BOARD FUNCTION\r\n  clickOnBoardHandler = (e, id) => {\r\n    const { renderedBoards, clickedBoards } = this.state\r\n    const index = renderedBoards.findIndex(board => (\r\n      board.id === id\r\n    ))\r\n    if (renderedBoards[index].isDone) return\r\n    if (this.state.wait) return\r\n    renderedBoards[index].isDone = true;\r\n    clickedBoards.push(renderedBoards[index])\r\n    this.setState({ renderedBoards, clickedBoards })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n    const { renderedBoards, time, isGameRunning, isGameReady, isStartGameWindowActive } = this.state\r\n    return (\r\n      <Layout>\r\n\r\n        <StartGameWindow\r\n          isGameRunning={isGameRunning}\r\n          startGame={this.startGameHandler}\r\n          time={time}\r\n          isGameReady={isGameReady}\r\n          isStartGameWindowActive={isStartGameWindowActive}\r\n        />\r\n        <Boards\r\n          clickBoard={this.clickOnBoardHandler}\r\n          renderedBoards={renderedBoards}\r\n          giveColors={this.giveRandomColorsHandler} />\r\n\r\n        <EndGameWindow\r\n          isGameReady={isGameReady}\r\n          isGameRunning={isGameRunning}\r\n          time={time}\r\n          startGame={this.startGameHandler}\r\n        />\r\n      </Layout>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './containers/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}